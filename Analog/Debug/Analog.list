
Analog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004850  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a14  08004a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a2c  08004a2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004a2c  08004a2c  00014a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a34  08004a34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a34  08004a34  00014a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a38  08004a38  00014a38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004a3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000720  2000000c  08004a48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000072c  08004a48  0002072c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001057e  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002236  00000000  00000000  000305fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ed8  00000000  00000000  00032838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b9f  00000000  00000000  00033710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022db7  00000000  00000000  000342af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011660  00000000  00000000  00057066  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db52c  00000000  00000000  000686c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003fcc  00000000  00000000  00143bf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  00147bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080049fc 	.word	0x080049fc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080049fc 	.word	0x080049fc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b970 	b.w	80004fc <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9e08      	ldr	r6, [sp, #32]
 800023a:	460d      	mov	r5, r1
 800023c:	4604      	mov	r4, r0
 800023e:	460f      	mov	r7, r1
 8000240:	2b00      	cmp	r3, #0
 8000242:	d14a      	bne.n	80002da <__udivmoddi4+0xa6>
 8000244:	428a      	cmp	r2, r1
 8000246:	4694      	mov	ip, r2
 8000248:	d965      	bls.n	8000316 <__udivmoddi4+0xe2>
 800024a:	fab2 f382 	clz	r3, r2
 800024e:	b143      	cbz	r3, 8000262 <__udivmoddi4+0x2e>
 8000250:	fa02 fc03 	lsl.w	ip, r2, r3
 8000254:	f1c3 0220 	rsb	r2, r3, #32
 8000258:	409f      	lsls	r7, r3
 800025a:	fa20 f202 	lsr.w	r2, r0, r2
 800025e:	4317      	orrs	r7, r2
 8000260:	409c      	lsls	r4, r3
 8000262:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000266:	fa1f f58c 	uxth.w	r5, ip
 800026a:	fbb7 f1fe 	udiv	r1, r7, lr
 800026e:	0c22      	lsrs	r2, r4, #16
 8000270:	fb0e 7711 	mls	r7, lr, r1, r7
 8000274:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000278:	fb01 f005 	mul.w	r0, r1, r5
 800027c:	4290      	cmp	r0, r2
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x62>
 8000280:	eb1c 0202 	adds.w	r2, ip, r2
 8000284:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000288:	f080 811c 	bcs.w	80004c4 <__udivmoddi4+0x290>
 800028c:	4290      	cmp	r0, r2
 800028e:	f240 8119 	bls.w	80004c4 <__udivmoddi4+0x290>
 8000292:	3902      	subs	r1, #2
 8000294:	4462      	add	r2, ip
 8000296:	1a12      	subs	r2, r2, r0
 8000298:	b2a4      	uxth	r4, r4
 800029a:	fbb2 f0fe 	udiv	r0, r2, lr
 800029e:	fb0e 2210 	mls	r2, lr, r0, r2
 80002a2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002a6:	fb00 f505 	mul.w	r5, r0, r5
 80002aa:	42a5      	cmp	r5, r4
 80002ac:	d90a      	bls.n	80002c4 <__udivmoddi4+0x90>
 80002ae:	eb1c 0404 	adds.w	r4, ip, r4
 80002b2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002b6:	f080 8107 	bcs.w	80004c8 <__udivmoddi4+0x294>
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	f240 8104 	bls.w	80004c8 <__udivmoddi4+0x294>
 80002c0:	4464      	add	r4, ip
 80002c2:	3802      	subs	r0, #2
 80002c4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002c8:	1b64      	subs	r4, r4, r5
 80002ca:	2100      	movs	r1, #0
 80002cc:	b11e      	cbz	r6, 80002d6 <__udivmoddi4+0xa2>
 80002ce:	40dc      	lsrs	r4, r3
 80002d0:	2300      	movs	r3, #0
 80002d2:	e9c6 4300 	strd	r4, r3, [r6]
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d908      	bls.n	80002f0 <__udivmoddi4+0xbc>
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f000 80ed 	beq.w	80004be <__udivmoddi4+0x28a>
 80002e4:	2100      	movs	r1, #0
 80002e6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ea:	4608      	mov	r0, r1
 80002ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f0:	fab3 f183 	clz	r1, r3
 80002f4:	2900      	cmp	r1, #0
 80002f6:	d149      	bne.n	800038c <__udivmoddi4+0x158>
 80002f8:	42ab      	cmp	r3, r5
 80002fa:	d302      	bcc.n	8000302 <__udivmoddi4+0xce>
 80002fc:	4282      	cmp	r2, r0
 80002fe:	f200 80f8 	bhi.w	80004f2 <__udivmoddi4+0x2be>
 8000302:	1a84      	subs	r4, r0, r2
 8000304:	eb65 0203 	sbc.w	r2, r5, r3
 8000308:	2001      	movs	r0, #1
 800030a:	4617      	mov	r7, r2
 800030c:	2e00      	cmp	r6, #0
 800030e:	d0e2      	beq.n	80002d6 <__udivmoddi4+0xa2>
 8000310:	e9c6 4700 	strd	r4, r7, [r6]
 8000314:	e7df      	b.n	80002d6 <__udivmoddi4+0xa2>
 8000316:	b902      	cbnz	r2, 800031a <__udivmoddi4+0xe6>
 8000318:	deff      	udf	#255	; 0xff
 800031a:	fab2 f382 	clz	r3, r2
 800031e:	2b00      	cmp	r3, #0
 8000320:	f040 8090 	bne.w	8000444 <__udivmoddi4+0x210>
 8000324:	1a8a      	subs	r2, r1, r2
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2101      	movs	r1, #1
 8000330:	fbb2 f5f7 	udiv	r5, r2, r7
 8000334:	fb07 2015 	mls	r0, r7, r5, r2
 8000338:	0c22      	lsrs	r2, r4, #16
 800033a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800033e:	fb0e f005 	mul.w	r0, lr, r5
 8000342:	4290      	cmp	r0, r2
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x124>
 8000346:	eb1c 0202 	adds.w	r2, ip, r2
 800034a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x122>
 8000350:	4290      	cmp	r0, r2
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2b8>
 8000356:	4645      	mov	r5, r8
 8000358:	1a12      	subs	r2, r2, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000360:	fb07 2210 	mls	r2, r7, r0, r2
 8000364:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x14e>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x14c>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2c2>
 8000380:	4610      	mov	r0, r2
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800038a:	e79f      	b.n	80002cc <__udivmoddi4+0x98>
 800038c:	f1c1 0720 	rsb	r7, r1, #32
 8000390:	408b      	lsls	r3, r1
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa05 f401 	lsl.w	r4, r5, r1
 800039e:	fa20 f307 	lsr.w	r3, r0, r7
 80003a2:	40fd      	lsrs	r5, r7
 80003a4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a8:	4323      	orrs	r3, r4
 80003aa:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	fb09 5518 	mls	r5, r9, r8, r5
 80003b6:	0c1c      	lsrs	r4, r3, #16
 80003b8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003bc:	fb08 f50e 	mul.w	r5, r8, lr
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	fa02 f201 	lsl.w	r2, r2, r1
 80003c6:	fa00 f001 	lsl.w	r0, r0, r1
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b0>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2b4>
 80003d8:	42a5      	cmp	r5, r4
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2b4>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4464      	add	r4, ip
 80003e4:	1b64      	subs	r4, r4, r5
 80003e6:	b29d      	uxth	r5, r3
 80003e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ec:	fb09 4413 	mls	r4, r9, r3, r4
 80003f0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003f4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1da>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2ac>
 8000406:	45a6      	cmp	lr, r4
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2ac>
 800040a:	3b02      	subs	r3, #2
 800040c:	4464      	add	r4, ip
 800040e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000412:	fba3 9502 	umull	r9, r5, r3, r2
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	42ac      	cmp	r4, r5
 800041c:	46c8      	mov	r8, r9
 800041e:	46ae      	mov	lr, r5
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x29c>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x298>
 8000424:	b156      	cbz	r6, 800043c <__udivmoddi4+0x208>
 8000426:	ebb0 0208 	subs.w	r2, r0, r8
 800042a:	eb64 040e 	sbc.w	r4, r4, lr
 800042e:	fa04 f707 	lsl.w	r7, r4, r7
 8000432:	40ca      	lsrs	r2, r1
 8000434:	40cc      	lsrs	r4, r1
 8000436:	4317      	orrs	r7, r2
 8000438:	e9c6 7400 	strd	r7, r4, [r6]
 800043c:	4618      	mov	r0, r3
 800043e:	2100      	movs	r1, #0
 8000440:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000444:	f1c3 0120 	rsb	r1, r3, #32
 8000448:	fa02 fc03 	lsl.w	ip, r2, r3
 800044c:	fa20 f201 	lsr.w	r2, r0, r1
 8000450:	fa25 f101 	lsr.w	r1, r5, r1
 8000454:	409d      	lsls	r5, r3
 8000456:	432a      	orrs	r2, r5
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb1 f0f7 	udiv	r0, r1, r7
 8000464:	fb07 1510 	mls	r5, r7, r0, r1
 8000468:	0c11      	lsrs	r1, r2, #16
 800046a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800046e:	fb00 f50e 	mul.w	r5, r0, lr
 8000472:	428d      	cmp	r5, r1
 8000474:	fa04 f403 	lsl.w	r4, r4, r3
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x258>
 800047a:	eb1c 0101 	adds.w	r1, ip, r1
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b0>
 8000484:	428d      	cmp	r5, r1
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b0>
 8000488:	3802      	subs	r0, #2
 800048a:	4461      	add	r1, ip
 800048c:	1b49      	subs	r1, r1, r5
 800048e:	b292      	uxth	r2, r2
 8000490:	fbb1 f5f7 	udiv	r5, r1, r7
 8000494:	fb07 1115 	mls	r1, r7, r5, r1
 8000498:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800049c:	fb05 f10e 	mul.w	r1, r5, lr
 80004a0:	4291      	cmp	r1, r2
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x282>
 80004a4:	eb1c 0202 	adds.w	r2, ip, r2
 80004a8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 80004ae:	4291      	cmp	r1, r2
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2a8>
 80004b2:	3d02      	subs	r5, #2
 80004b4:	4462      	add	r2, ip
 80004b6:	1a52      	subs	r2, r2, r1
 80004b8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0xfc>
 80004be:	4631      	mov	r1, r6
 80004c0:	4630      	mov	r0, r6
 80004c2:	e708      	b.n	80002d6 <__udivmoddi4+0xa2>
 80004c4:	4639      	mov	r1, r7
 80004c6:	e6e6      	b.n	8000296 <__udivmoddi4+0x62>
 80004c8:	4610      	mov	r0, r2
 80004ca:	e6fb      	b.n	80002c4 <__udivmoddi4+0x90>
 80004cc:	4548      	cmp	r0, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f0>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004d8:	3b01      	subs	r3, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f0>
 80004dc:	4645      	mov	r5, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x282>
 80004e0:	462b      	mov	r3, r5
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1da>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x258>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b0>
 80004ec:	3d02      	subs	r5, #2
 80004ee:	4462      	add	r2, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x124>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e70a      	b.n	800030c <__udivmoddi4+0xd8>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x14e>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b084      	sub	sp, #16
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000506:	f000 fe89 	bl	800121c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800050a:	f000 f861 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050e:	f000 fb03 	bl	8000b18 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000512:	f000 faa9 	bl	8000a68 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000516:	f000 fad1 	bl	8000abc <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 800051a:	f000 f8c5 	bl	80006a8 <MX_ADC1_Init>
  MX_ADC2_Init();
 800051e:	f000 f915 	bl	800074c <MX_ADC2_Init>
  MX_ADC3_Init();
 8000522:	f000 f965 	bl	80007f0 <MX_ADC3_Init>
  MX_TIM11_Init();
 8000526:	f000 f9b5 	bl	8000894 <MX_TIM11_Init>
  MX_TIM13_Init();
 800052a:	f000 fa01 	bl	8000930 <MX_TIM13_Init>
  MX_TIM14_Init();
 800052e:	f000 fa4d 	bl	80009cc <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim11, TIM_CHANNEL_1);
 8000532:	2100      	movs	r1, #0
 8000534:	481d      	ldr	r0, [pc, #116]	; (80005ac <main+0xac>)
 8000536:	f003 f879 	bl	800362c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim13, TIM_CHANNEL_1);
 800053a:	2100      	movs	r1, #0
 800053c:	481c      	ldr	r0, [pc, #112]	; (80005b0 <main+0xb0>)
 800053e:	f003 f875 	bl	800362c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8000542:	2100      	movs	r1, #0
 8000544:	481b      	ldr	r0, [pc, #108]	; (80005b4 <main+0xb4>)
 8000546:	f003 f871 	bl	800362c <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_ADC_Start(&hadc1);
 800054a:	481b      	ldr	r0, [pc, #108]	; (80005b8 <main+0xb8>)
 800054c:	f000 ff40 	bl	80013d0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000550:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000554:	4818      	ldr	r0, [pc, #96]	; (80005b8 <main+0xb8>)
 8000556:	f001 f80d 	bl	8001574 <HAL_ADC_PollForConversion>
	raw1 = HAL_ADC_GetValue(&hadc1);
 800055a:	4817      	ldr	r0, [pc, #92]	; (80005b8 <main+0xb8>)
 800055c:	f001 f895 	bl	800168a <HAL_ADC_GetValue>
 8000560:	60f8      	str	r0, [r7, #12]

	HAL_ADC_Start(&hadc2);
 8000562:	4816      	ldr	r0, [pc, #88]	; (80005bc <main+0xbc>)
 8000564:	f000 ff34 	bl	80013d0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8000568:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800056c:	4813      	ldr	r0, [pc, #76]	; (80005bc <main+0xbc>)
 800056e:	f001 f801 	bl	8001574 <HAL_ADC_PollForConversion>
	raw2 = HAL_ADC_GetValue(&hadc2);
 8000572:	4812      	ldr	r0, [pc, #72]	; (80005bc <main+0xbc>)
 8000574:	f001 f889 	bl	800168a <HAL_ADC_GetValue>
 8000578:	60b8      	str	r0, [r7, #8]

	HAL_ADC_Start(&hadc3);
 800057a:	4811      	ldr	r0, [pc, #68]	; (80005c0 <main+0xc0>)
 800057c:	f000 ff28 	bl	80013d0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc3, HAL_MAX_DELAY);
 8000580:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000584:	480e      	ldr	r0, [pc, #56]	; (80005c0 <main+0xc0>)
 8000586:	f000 fff5 	bl	8001574 <HAL_ADC_PollForConversion>
	raw3 = HAL_ADC_GetValue(&hadc3);
 800058a:	480d      	ldr	r0, [pc, #52]	; (80005c0 <main+0xc0>)
 800058c:	f001 f87d 	bl	800168a <HAL_ADC_GetValue>
 8000590:	6078      	str	r0, [r7, #4]

	TIM11->CCR1 = raw1 << 4;
 8000592:	4a0c      	ldr	r2, [pc, #48]	; (80005c4 <main+0xc4>)
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	011b      	lsls	r3, r3, #4
 8000598:	6353      	str	r3, [r2, #52]	; 0x34
	TIM13->CCR1 = raw2 << 4;
 800059a:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <main+0xc8>)
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	011b      	lsls	r3, r3, #4
 80005a0:	6353      	str	r3, [r2, #52]	; 0x34
	TIM14->CCR1 = raw3 << 4;
 80005a2:	4a0a      	ldr	r2, [pc, #40]	; (80005cc <main+0xcc>)
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	011b      	lsls	r3, r3, #4
 80005a8:	6353      	str	r3, [r2, #52]	; 0x34
	HAL_ADC_Start(&hadc1);
 80005aa:	e7ce      	b.n	800054a <main+0x4a>
 80005ac:	20000100 	.word	0x20000100
 80005b0:	20000148 	.word	0x20000148
 80005b4:	20000190 	.word	0x20000190
 80005b8:	20000028 	.word	0x20000028
 80005bc:	20000070 	.word	0x20000070
 80005c0:	200000b8 	.word	0x200000b8
 80005c4:	40014800 	.word	0x40014800
 80005c8:	40001c00 	.word	0x40001c00
 80005cc:	40002000 	.word	0x40002000

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2234      	movs	r2, #52	; 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f004 f9e0 	bl	80049a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	2300      	movs	r3, #0
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	4b29      	ldr	r3, [pc, #164]	; (80006a0 <SystemClock_Config+0xd0>)
 80005fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005fc:	4a28      	ldr	r2, [pc, #160]	; (80006a0 <SystemClock_Config+0xd0>)
 80005fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000602:	6413      	str	r3, [r2, #64]	; 0x40
 8000604:	4b26      	ldr	r3, [pc, #152]	; (80006a0 <SystemClock_Config+0xd0>)
 8000606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000610:	2300      	movs	r3, #0
 8000612:	603b      	str	r3, [r7, #0]
 8000614:	4b23      	ldr	r3, [pc, #140]	; (80006a4 <SystemClock_Config+0xd4>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a22      	ldr	r2, [pc, #136]	; (80006a4 <SystemClock_Config+0xd4>)
 800061a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061e:	6013      	str	r3, [r2, #0]
 8000620:	4b20      	ldr	r3, [pc, #128]	; (80006a4 <SystemClock_Config+0xd4>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000628:	603b      	str	r3, [r7, #0]
 800062a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800062c:	2301      	movs	r3, #1
 800062e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000630:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000634:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000636:	2302      	movs	r3, #2
 8000638:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800063a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000640:	2304      	movs	r3, #4
 8000642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000644:	23a8      	movs	r3, #168	; 0xa8
 8000646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000648:	2302      	movs	r3, #2
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800064c:	2307      	movs	r3, #7
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000650:	2302      	movs	r3, #2
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 031c 	add.w	r3, r7, #28
 8000658:	4618      	mov	r0, r3
 800065a:	f002 fca1 	bl	8002fa0 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000664:	f000 fb14 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000674:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800067e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000680:	f107 0308 	add.w	r3, r7, #8
 8000684:	2105      	movs	r1, #5
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fe16 	bl	80022b8 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000692:	f000 fafd 	bl	8000c90 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	; 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006ae:	463b      	mov	r3, r7
 80006b0:	2200      	movs	r2, #0
 80006b2:	601a      	str	r2, [r3, #0]
 80006b4:	605a      	str	r2, [r3, #4]
 80006b6:	609a      	str	r2, [r3, #8]
 80006b8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80006ba:	4b21      	ldr	r3, [pc, #132]	; (8000740 <MX_ADC1_Init+0x98>)
 80006bc:	4a21      	ldr	r2, [pc, #132]	; (8000744 <MX_ADC1_Init+0x9c>)
 80006be:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006c0:	4b1f      	ldr	r3, [pc, #124]	; (8000740 <MX_ADC1_Init+0x98>)
 80006c2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80006c6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80006c8:	4b1d      	ldr	r3, [pc, #116]	; (8000740 <MX_ADC1_Init+0x98>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_ADC1_Init+0x98>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80006d4:	4b1a      	ldr	r3, [pc, #104]	; (8000740 <MX_ADC1_Init+0x98>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80006da:	4b19      	ldr	r3, [pc, #100]	; (8000740 <MX_ADC1_Init+0x98>)
 80006dc:	2200      	movs	r2, #0
 80006de:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80006e2:	4b17      	ldr	r3, [pc, #92]	; (8000740 <MX_ADC1_Init+0x98>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <MX_ADC1_Init+0x98>)
 80006ea:	4a17      	ldr	r2, [pc, #92]	; (8000748 <MX_ADC1_Init+0xa0>)
 80006ec:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80006ee:	4b14      	ldr	r3, [pc, #80]	; (8000740 <MX_ADC1_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <MX_ADC1_Init+0x98>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006fa:	4b11      	ldr	r3, [pc, #68]	; (8000740 <MX_ADC1_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_ADC1_Init+0x98>)
 8000704:	2201      	movs	r2, #1
 8000706:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <MX_ADC1_Init+0x98>)
 800070a:	f000 fe1d 	bl	8001348 <HAL_ADC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000714:	f000 fabc 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000718:	2303      	movs	r3, #3
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800071c:	2301      	movs	r3, #1
 800071e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000720:	2300      	movs	r3, #0
 8000722:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000724:	463b      	mov	r3, r7
 8000726:	4619      	mov	r1, r3
 8000728:	4805      	ldr	r0, [pc, #20]	; (8000740 <MX_ADC1_Init+0x98>)
 800072a:	f000 ffbb 	bl	80016a4 <HAL_ADC_ConfigChannel>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000734:	f000 faac 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000738:	bf00      	nop
 800073a:	3710      	adds	r7, #16
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000028 	.word	0x20000028
 8000744:	40012000 	.word	0x40012000
 8000748:	0f000001 	.word	0x0f000001

0800074c <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800075e:	4b21      	ldr	r3, [pc, #132]	; (80007e4 <MX_ADC2_Init+0x98>)
 8000760:	4a21      	ldr	r2, [pc, #132]	; (80007e8 <MX_ADC2_Init+0x9c>)
 8000762:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <MX_ADC2_Init+0x98>)
 8000766:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800076a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <MX_ADC2_Init+0x98>)
 800076e:	2200      	movs	r2, #0
 8000770:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000772:	4b1c      	ldr	r3, [pc, #112]	; (80007e4 <MX_ADC2_Init+0x98>)
 8000774:	2200      	movs	r2, #0
 8000776:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <MX_ADC2_Init+0x98>)
 800077a:	2200      	movs	r2, #0
 800077c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800077e:	4b19      	ldr	r3, [pc, #100]	; (80007e4 <MX_ADC2_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000786:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <MX_ADC2_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800078c:	4b15      	ldr	r3, [pc, #84]	; (80007e4 <MX_ADC2_Init+0x98>)
 800078e:	4a17      	ldr	r2, [pc, #92]	; (80007ec <MX_ADC2_Init+0xa0>)
 8000790:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000792:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_ADC2_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000798:	4b12      	ldr	r3, [pc, #72]	; (80007e4 <MX_ADC2_Init+0x98>)
 800079a:	2201      	movs	r2, #1
 800079c:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_ADC2_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007a6:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_ADC2_Init+0x98>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <MX_ADC2_Init+0x98>)
 80007ae:	f000 fdcb 	bl	8001348 <HAL_ADC_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80007b8:	f000 fa6a 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007bc:	2305      	movs	r3, #5
 80007be:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80007c8:	463b      	mov	r3, r7
 80007ca:	4619      	mov	r1, r3
 80007cc:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_ADC2_Init+0x98>)
 80007ce:	f000 ff69 	bl	80016a4 <HAL_ADC_ConfigChannel>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80007d8:	f000 fa5a 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	20000070 	.word	0x20000070
 80007e8:	40012100 	.word	0x40012100
 80007ec:	0f000001 	.word	0x0f000001

080007f0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b084      	sub	sp, #16
 80007f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007f6:	463b      	mov	r3, r7
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000802:	4b21      	ldr	r3, [pc, #132]	; (8000888 <MX_ADC3_Init+0x98>)
 8000804:	4a21      	ldr	r2, [pc, #132]	; (800088c <MX_ADC3_Init+0x9c>)
 8000806:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000808:	4b1f      	ldr	r3, [pc, #124]	; (8000888 <MX_ADC3_Init+0x98>)
 800080a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800080e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <MX_ADC3_Init+0x98>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8000816:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <MX_ADC3_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800081c:	4b1a      	ldr	r3, [pc, #104]	; (8000888 <MX_ADC3_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000822:	4b19      	ldr	r3, [pc, #100]	; (8000888 <MX_ADC3_Init+0x98>)
 8000824:	2200      	movs	r2, #0
 8000826:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800082a:	4b17      	ldr	r3, [pc, #92]	; (8000888 <MX_ADC3_Init+0x98>)
 800082c:	2200      	movs	r2, #0
 800082e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000830:	4b15      	ldr	r3, [pc, #84]	; (8000888 <MX_ADC3_Init+0x98>)
 8000832:	4a17      	ldr	r2, [pc, #92]	; (8000890 <MX_ADC3_Init+0xa0>)
 8000834:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MX_ADC3_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_ADC3_Init+0x98>)
 800083e:	2201      	movs	r2, #1
 8000840:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000842:	4b11      	ldr	r3, [pc, #68]	; (8000888 <MX_ADC3_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_ADC3_Init+0x98>)
 800084c:	2201      	movs	r2, #1
 800084e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000850:	480d      	ldr	r0, [pc, #52]	; (8000888 <MX_ADC3_Init+0x98>)
 8000852:	f000 fd79 	bl	8001348 <HAL_ADC_Init>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800085c:	f000 fa18 	bl	8000c90 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000860:	2300      	movs	r3, #0
 8000862:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000864:	2301      	movs	r3, #1
 8000866:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000868:	2300      	movs	r3, #0
 800086a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800086c:	463b      	mov	r3, r7
 800086e:	4619      	mov	r1, r3
 8000870:	4805      	ldr	r0, [pc, #20]	; (8000888 <MX_ADC3_Init+0x98>)
 8000872:	f000 ff17 	bl	80016a4 <HAL_ADC_ConfigChannel>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800087c:	f000 fa08 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	3710      	adds	r7, #16
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000b8 	.word	0x200000b8
 800088c:	40012200 	.word	0x40012200
 8000890:	0f000001 	.word	0x0f000001

08000894 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b088      	sub	sp, #32
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]
 80008a6:	611a      	str	r2, [r3, #16]
 80008a8:	615a      	str	r2, [r3, #20]
 80008aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80008ac:	4b1e      	ldr	r3, [pc, #120]	; (8000928 <MX_TIM11_Init+0x94>)
 80008ae:	4a1f      	ldr	r2, [pc, #124]	; (800092c <MX_TIM11_Init+0x98>)
 80008b0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80008b2:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_TIM11_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <MX_TIM11_Init+0x94>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80008be:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_TIM11_Init+0x94>)
 80008c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008c4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b18      	ldr	r3, [pc, #96]	; (8000928 <MX_TIM11_Init+0x94>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b16      	ldr	r3, [pc, #88]	; (8000928 <MX_TIM11_Init+0x94>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80008d2:	4815      	ldr	r0, [pc, #84]	; (8000928 <MX_TIM11_Init+0x94>)
 80008d4:	f002 fe02 	bl	80034dc <HAL_TIM_Base_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80008de:	f000 f9d7 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 80008e2:	4811      	ldr	r0, [pc, #68]	; (8000928 <MX_TIM11_Init+0x94>)
 80008e4:	f002 fe49 	bl	800357a <HAL_TIM_PWM_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80008ee:	f000 f9cf 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f2:	2360      	movs	r3, #96	; 0x60
 80008f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2200      	movs	r2, #0
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	; (8000928 <MX_TIM11_Init+0x94>)
 800090a:	f002 ff57 	bl	80037bc <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM11_Init+0x84>
  {
    Error_Handler();
 8000914:	f000 f9bc 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */
  HAL_TIM_MspPostInit(&htim11);
 8000918:	4803      	ldr	r0, [pc, #12]	; (8000928 <MX_TIM11_Init+0x94>)
 800091a:	f000 fad9 	bl	8000ed0 <HAL_TIM_MspPostInit>

}
 800091e:	bf00      	nop
 8000920:	3720      	adds	r7, #32
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000100 	.word	0x20000100
 800092c:	40014800 	.word	0x40014800

08000930 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b088      	sub	sp, #32
 8000934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000936:	1d3b      	adds	r3, r7, #4
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]
 8000944:	615a      	str	r2, [r3, #20]
 8000946:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <MX_TIM13_Init+0x94>)
 800094a:	4a1f      	ldr	r2, [pc, #124]	; (80009c8 <MX_TIM13_Init+0x98>)
 800094c:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 0;
 800094e:	4b1d      	ldr	r3, [pc, #116]	; (80009c4 <MX_TIM13_Init+0x94>)
 8000950:	2200      	movs	r2, #0
 8000952:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b1b      	ldr	r3, [pc, #108]	; (80009c4 <MX_TIM13_Init+0x94>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 65535;
 800095a:	4b1a      	ldr	r3, [pc, #104]	; (80009c4 <MX_TIM13_Init+0x94>)
 800095c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000960:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000962:	4b18      	ldr	r3, [pc, #96]	; (80009c4 <MX_TIM13_Init+0x94>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000968:	4b16      	ldr	r3, [pc, #88]	; (80009c4 <MX_TIM13_Init+0x94>)
 800096a:	2200      	movs	r2, #0
 800096c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800096e:	4815      	ldr	r0, [pc, #84]	; (80009c4 <MX_TIM13_Init+0x94>)
 8000970:	f002 fdb4 	bl	80034dc <HAL_TIM_Base_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_TIM13_Init+0x4e>
  {
    Error_Handler();
 800097a:	f000 f989 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim13) != HAL_OK)
 800097e:	4811      	ldr	r0, [pc, #68]	; (80009c4 <MX_TIM13_Init+0x94>)
 8000980:	f002 fdfb 	bl	800357a <HAL_TIM_PWM_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_TIM13_Init+0x5e>
  {
    Error_Handler();
 800098a:	f000 f981 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800098e:	2360      	movs	r3, #96	; 0x60
 8000990:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim13, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	2200      	movs	r2, #0
 80009a2:	4619      	mov	r1, r3
 80009a4:	4807      	ldr	r0, [pc, #28]	; (80009c4 <MX_TIM13_Init+0x94>)
 80009a6:	f002 ff09 	bl	80037bc <HAL_TIM_PWM_ConfigChannel>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM13_Init+0x84>
  {
    Error_Handler();
 80009b0:	f000 f96e 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */
  HAL_TIM_MspPostInit(&htim13);
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <MX_TIM13_Init+0x94>)
 80009b6:	f000 fa8b 	bl	8000ed0 <HAL_TIM_MspPostInit>

}
 80009ba:	bf00      	nop
 80009bc:	3720      	adds	r7, #32
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000148 	.word	0x20000148
 80009c8:	40001c00 	.word	0x40001c00

080009cc <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
 80009e0:	615a      	str	r2, [r3, #20]
 80009e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80009e4:	4b1e      	ldr	r3, [pc, #120]	; (8000a60 <MX_TIM14_Init+0x94>)
 80009e6:	4a1f      	ldr	r2, [pc, #124]	; (8000a64 <MX_TIM14_Init+0x98>)
 80009e8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 80009ea:	4b1d      	ldr	r3, [pc, #116]	; (8000a60 <MX_TIM14_Init+0x94>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f0:	4b1b      	ldr	r3, [pc, #108]	; (8000a60 <MX_TIM14_Init+0x94>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 80009f6:	4b1a      	ldr	r3, [pc, #104]	; (8000a60 <MX_TIM14_Init+0x94>)
 80009f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009fc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009fe:	4b18      	ldr	r3, [pc, #96]	; (8000a60 <MX_TIM14_Init+0x94>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a04:	4b16      	ldr	r3, [pc, #88]	; (8000a60 <MX_TIM14_Init+0x94>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000a0a:	4815      	ldr	r0, [pc, #84]	; (8000a60 <MX_TIM14_Init+0x94>)
 8000a0c:	f002 fd66 	bl	80034dc <HAL_TIM_Base_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 8000a16:	f000 f93b 	bl	8000c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <MX_TIM14_Init+0x94>)
 8000a1c:	f002 fdad 	bl	800357a <HAL_TIM_PWM_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 8000a26:	f000 f933 	bl	8000c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a2a:	2360      	movs	r3, #96	; 0x60
 8000a2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a3a:	1d3b      	adds	r3, r7, #4
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4807      	ldr	r0, [pc, #28]	; (8000a60 <MX_TIM14_Init+0x94>)
 8000a42:	f002 febb 	bl	80037bc <HAL_TIM_PWM_ConfigChannel>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8000a4c:	f000 f920 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8000a50:	4803      	ldr	r0, [pc, #12]	; (8000a60 <MX_TIM14_Init+0x94>)
 8000a52:	f000 fa3d 	bl	8000ed0 <HAL_TIM_MspPostInit>

}
 8000a56:	bf00      	nop
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000190 	.word	0x20000190
 8000a64:	40002000 	.word	0x40002000

08000a68 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a6c:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a6e:	4a12      	ldr	r2, [pc, #72]	; (8000ab8 <MX_USART3_UART_Init+0x50>)
 8000a70:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a72:	4b10      	ldr	r3, [pc, #64]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a78:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a8e:	220c      	movs	r2, #12
 8000a90:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART3_UART_Init+0x4c>)
 8000aa0:	f003 f9c3 	bl	8003e2a <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000aaa:	f000 f8f1 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200001d8 	.word	0x200001d8
 8000ab8:	40004800 	.word	0x40004800

08000abc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000ac0:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ac2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ac6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000ac8:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aca:	2206      	movs	r2, #6
 8000acc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000ace:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad0:	2202      	movs	r2, #2
 8000ad2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000aec:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000afe:	4805      	ldr	r0, [pc, #20]	; (8000b14 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b00:	f001 fa91 	bl	8002026 <HAL_PCD_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b0a:	f000 f8c1 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000021c 	.word	0x2000021c

08000b18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b08c      	sub	sp, #48	; 0x30
 8000b1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1e:	f107 031c 	add.w	r3, r7, #28
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]
 8000b28:	609a      	str	r2, [r3, #8]
 8000b2a:	60da      	str	r2, [r3, #12]
 8000b2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
 8000b32:	4b53      	ldr	r3, [pc, #332]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	4a52      	ldr	r2, [pc, #328]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b38:	f043 0304 	orr.w	r3, r3, #4
 8000b3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3e:	4b50      	ldr	r3, [pc, #320]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	f003 0304 	and.w	r3, r3, #4
 8000b46:	61bb      	str	r3, [r7, #24]
 8000b48:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	4b4c      	ldr	r3, [pc, #304]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	4a4b      	ldr	r2, [pc, #300]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b54:	f043 0320 	orr.w	r3, r3, #32
 8000b58:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5a:	4b49      	ldr	r3, [pc, #292]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5e:	f003 0320 	and.w	r3, r3, #32
 8000b62:	617b      	str	r3, [r7, #20]
 8000b64:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	613b      	str	r3, [r7, #16]
 8000b6a:	4b45      	ldr	r3, [pc, #276]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a44      	ldr	r2, [pc, #272]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b42      	ldr	r3, [pc, #264]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b7e:	613b      	str	r3, [r7, #16]
 8000b80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b3e      	ldr	r3, [pc, #248]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a3d      	ldr	r2, [pc, #244]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b3b      	ldr	r3, [pc, #236]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	4b37      	ldr	r3, [pc, #220]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a36      	ldr	r2, [pc, #216]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	607b      	str	r3, [r7, #4]
 8000bbe:	4b30      	ldr	r3, [pc, #192]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a2f      	ldr	r2, [pc, #188]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000bc4:	f043 0308 	orr.w	r3, r3, #8
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b2d      	ldr	r3, [pc, #180]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0308 	and.w	r3, r3, #8
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a28      	ldr	r2, [pc, #160]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <MX_GPIO_Init+0x168>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f244 0181 	movw	r1, #16513	; 0x4081
 8000bf8:	4822      	ldr	r0, [pc, #136]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000bfa:	f001 f9fb 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2140      	movs	r1, #64	; 0x40
 8000c02:	4821      	ldr	r0, [pc, #132]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000c04:	f001 f9f6 	bl	8001ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c0e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c18:	f107 031c 	add.w	r3, r7, #28
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	481b      	ldr	r0, [pc, #108]	; (8000c8c <MX_GPIO_Init+0x174>)
 8000c20:	f001 f854 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c24:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	2300      	movs	r3, #0
 8000c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4811      	ldr	r0, [pc, #68]	; (8000c84 <MX_GPIO_Init+0x16c>)
 8000c3e:	f001 f845 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c42:	2340      	movs	r3, #64	; 0x40
 8000c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c46:	2301      	movs	r3, #1
 8000c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c52:	f107 031c 	add.w	r3, r7, #28
 8000c56:	4619      	mov	r1, r3
 8000c58:	480b      	ldr	r0, [pc, #44]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000c5a:	f001 f837 	bl	8001ccc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c5e:	2380      	movs	r3, #128	; 0x80
 8000c60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4805      	ldr	r0, [pc, #20]	; (8000c88 <MX_GPIO_Init+0x170>)
 8000c72:	f001 f82b 	bl	8001ccc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c76:	bf00      	nop
 8000c78:	3730      	adds	r7, #48	; 0x30
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020400 	.word	0x40020400
 8000c88:	40021800 	.word	0x40021800
 8000c8c:	40020800 	.word	0x40020800

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <Error_Handler+0x8>
	...

08000c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000caa:	4a0f      	ldr	r2, [pc, #60]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	4a08      	ldr	r2, [pc, #32]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	; 0x40
 8000cce:	4b06      	ldr	r3, [pc, #24]	; (8000ce8 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08e      	sub	sp, #56	; 0x38
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a45      	ldr	r2, [pc, #276]	; (8000e20 <HAL_ADC_MspInit+0x134>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	d128      	bne.n	8000d60 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
 8000d12:	4b44      	ldr	r3, [pc, #272]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d16:	4a43      	ldr	r2, [pc, #268]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1e:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d26:	623b      	str	r3, [r7, #32]
 8000d28:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a3c      	ldr	r2, [pc, #240]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d34:	f043 0301 	orr.w	r3, r3, #1
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b3a      	ldr	r3, [pc, #232]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0301 	and.w	r3, r3, #1
 8000d42:	61fb      	str	r3, [r7, #28]
 8000d44:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d46:	2308      	movs	r3, #8
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d56:	4619      	mov	r1, r3
 8000d58:	4833      	ldr	r0, [pc, #204]	; (8000e28 <HAL_ADC_MspInit+0x13c>)
 8000d5a:	f000 ffb7 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000d5e:	e05a      	b.n	8000e16 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <HAL_ADC_MspInit+0x140>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d128      	bne.n	8000dbc <HAL_ADC_MspInit+0xd0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61bb      	str	r3, [r7, #24]
 8000d6e:	4b2d      	ldr	r3, [pc, #180]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	4a2c      	ldr	r2, [pc, #176]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d78:	6453      	str	r3, [r2, #68]	; 0x44
 8000d7a:	4b2a      	ldr	r3, [pc, #168]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	4b26      	ldr	r3, [pc, #152]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a25      	ldr	r2, [pc, #148]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b23      	ldr	r3, [pc, #140]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	617b      	str	r3, [r7, #20]
 8000da0:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000da2:	2320      	movs	r3, #32
 8000da4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da6:	2303      	movs	r3, #3
 8000da8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000daa:	2300      	movs	r3, #0
 8000dac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	481c      	ldr	r0, [pc, #112]	; (8000e28 <HAL_ADC_MspInit+0x13c>)
 8000db6:	f000 ff89 	bl	8001ccc <HAL_GPIO_Init>
}
 8000dba:	e02c      	b.n	8000e16 <HAL_ADC_MspInit+0x12a>
  else if(hadc->Instance==ADC3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <HAL_ADC_MspInit+0x144>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d127      	bne.n	8000e16 <HAL_ADC_MspInit+0x12a>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
 8000dca:	4b16      	ldr	r3, [pc, #88]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000dd0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000dd6:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dde:	613b      	str	r3, [r7, #16]
 8000de0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	60fb      	str	r3, [r7, #12]
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a0e      	ldr	r2, [pc, #56]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_ADC_MspInit+0x138>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000dfe:	2301      	movs	r3, #1
 8000e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e02:	2303      	movs	r3, #3
 8000e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4805      	ldr	r0, [pc, #20]	; (8000e28 <HAL_ADC_MspInit+0x13c>)
 8000e12:	f000 ff5b 	bl	8001ccc <HAL_GPIO_Init>
}
 8000e16:	bf00      	nop
 8000e18:	3738      	adds	r7, #56	; 0x38
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40012000 	.word	0x40012000
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020000 	.word	0x40020000
 8000e2c:	40012100 	.word	0x40012100
 8000e30:	40012200 	.word	0x40012200

08000e34 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a1f      	ldr	r2, [pc, #124]	; (8000ec0 <HAL_TIM_Base_MspInit+0x8c>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d10e      	bne.n	8000e64 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
 8000e4a:	4b1e      	ldr	r3, [pc, #120]	; (8000ec4 <HAL_TIM_Base_MspInit+0x90>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <HAL_TIM_Base_MspInit+0x90>)
 8000e50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <HAL_TIM_Base_MspInit+0x90>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e5e:	617b      	str	r3, [r7, #20]
 8000e60:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000e62:	e026      	b.n	8000eb2 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM13)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a17      	ldr	r2, [pc, #92]	; (8000ec8 <HAL_TIM_Base_MspInit+0x94>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d10e      	bne.n	8000e8c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
 8000e72:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <HAL_TIM_Base_MspInit+0x90>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	4a13      	ldr	r2, [pc, #76]	; (8000ec4 <HAL_TIM_Base_MspInit+0x90>)
 8000e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e7e:	4b11      	ldr	r3, [pc, #68]	; (8000ec4 <HAL_TIM_Base_MspInit+0x90>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
}
 8000e8a:	e012      	b.n	8000eb2 <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM14)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a0e      	ldr	r2, [pc, #56]	; (8000ecc <HAL_TIM_Base_MspInit+0x98>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d10d      	bne.n	8000eb2 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b0a      	ldr	r3, [pc, #40]	; (8000ec4 <HAL_TIM_Base_MspInit+0x90>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a09      	ldr	r2, [pc, #36]	; (8000ec4 <HAL_TIM_Base_MspInit+0x90>)
 8000ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b07      	ldr	r3, [pc, #28]	; (8000ec4 <HAL_TIM_Base_MspInit+0x90>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
}
 8000eb2:	bf00      	nop
 8000eb4:	371c      	adds	r7, #28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40014800 	.word	0x40014800
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40001c00 	.word	0x40001c00
 8000ecc:	40002000 	.word	0x40002000

08000ed0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08a      	sub	sp, #40	; 0x28
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a37      	ldr	r2, [pc, #220]	; (8000fcc <HAL_TIM_MspPostInit+0xfc>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d11e      	bne.n	8000f30 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	4b36      	ldr	r3, [pc, #216]	; (8000fd0 <HAL_TIM_MspPostInit+0x100>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a35      	ldr	r2, [pc, #212]	; (8000fd0 <HAL_TIM_MspPostInit+0x100>)
 8000efc:	f043 0320 	orr.w	r3, r3, #32
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b33      	ldr	r3, [pc, #204]	; (8000fd0 <HAL_TIM_MspPostInit+0x100>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0320 	and.w	r3, r3, #32
 8000f0a:	613b      	str	r3, [r7, #16]
 8000f0c:	693b      	ldr	r3, [r7, #16]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f0e:	2380      	movs	r3, #128	; 0x80
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f12:	2302      	movs	r3, #2
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000f1e:	2303      	movs	r3, #3
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4619      	mov	r1, r3
 8000f28:	482a      	ldr	r0, [pc, #168]	; (8000fd4 <HAL_TIM_MspPostInit+0x104>)
 8000f2a:	f000 fecf 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8000f2e:	e048      	b.n	8000fc2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM13)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a28      	ldr	r2, [pc, #160]	; (8000fd8 <HAL_TIM_MspPostInit+0x108>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d11f      	bne.n	8000f7a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	4b24      	ldr	r3, [pc, #144]	; (8000fd0 <HAL_TIM_MspPostInit+0x100>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	4a23      	ldr	r2, [pc, #140]	; (8000fd0 <HAL_TIM_MspPostInit+0x100>)
 8000f44:	f043 0320 	orr.w	r3, r3, #32
 8000f48:	6313      	str	r3, [r2, #48]	; 0x30
 8000f4a:	4b21      	ldr	r3, [pc, #132]	; (8000fd0 <HAL_TIM_MspPostInit+0x100>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f4e:	f003 0320 	and.w	r3, r3, #32
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f64:	2300      	movs	r3, #0
 8000f66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 8000f68:	2309      	movs	r3, #9
 8000f6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	4619      	mov	r1, r3
 8000f72:	4818      	ldr	r0, [pc, #96]	; (8000fd4 <HAL_TIM_MspPostInit+0x104>)
 8000f74:	f000 feaa 	bl	8001ccc <HAL_GPIO_Init>
}
 8000f78:	e023      	b.n	8000fc2 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM14)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a17      	ldr	r2, [pc, #92]	; (8000fdc <HAL_TIM_MspPostInit+0x10c>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d11e      	bne.n	8000fc2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f84:	2300      	movs	r3, #0
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	4b11      	ldr	r3, [pc, #68]	; (8000fd0 <HAL_TIM_MspPostInit+0x100>)
 8000f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8c:	4a10      	ldr	r2, [pc, #64]	; (8000fd0 <HAL_TIM_MspPostInit+0x100>)
 8000f8e:	f043 0320 	orr.w	r3, r3, #32
 8000f92:	6313      	str	r3, [r2, #48]	; 0x30
 8000f94:	4b0e      	ldr	r3, [pc, #56]	; (8000fd0 <HAL_TIM_MspPostInit+0x100>)
 8000f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f98:	f003 0320 	and.w	r3, r3, #32
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8000fb2:	2309      	movs	r3, #9
 8000fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000fb6:	f107 0314 	add.w	r3, r7, #20
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4805      	ldr	r0, [pc, #20]	; (8000fd4 <HAL_TIM_MspPostInit+0x104>)
 8000fbe:	f000 fe85 	bl	8001ccc <HAL_GPIO_Init>
}
 8000fc2:	bf00      	nop
 8000fc4:	3728      	adds	r7, #40	; 0x28
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	40014800 	.word	0x40014800
 8000fd0:	40023800 	.word	0x40023800
 8000fd4:	40021400 	.word	0x40021400
 8000fd8:	40001c00 	.word	0x40001c00
 8000fdc:	40002000 	.word	0x40002000

08000fe0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b08a      	sub	sp, #40	; 0x28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a19      	ldr	r2, [pc, #100]	; (8001064 <HAL_UART_MspInit+0x84>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d12c      	bne.n	800105c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_UART_MspInit+0x88>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	4a17      	ldr	r2, [pc, #92]	; (8001068 <HAL_UART_MspInit+0x88>)
 800100c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001010:	6413      	str	r3, [r2, #64]	; 0x40
 8001012:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_UART_MspInit+0x88>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_UART_MspInit+0x88>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a10      	ldr	r2, [pc, #64]	; (8001068 <HAL_UART_MspInit+0x88>)
 8001028:	f043 0308 	orr.w	r3, r3, #8
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <HAL_UART_MspInit+0x88>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0308 	and.w	r3, r3, #8
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800103a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800103e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001048:	2303      	movs	r3, #3
 800104a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800104c:	2307      	movs	r3, #7
 800104e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	4619      	mov	r1, r3
 8001056:	4805      	ldr	r0, [pc, #20]	; (800106c <HAL_UART_MspInit+0x8c>)
 8001058:	f000 fe38 	bl	8001ccc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40004800 	.word	0x40004800
 8001068:	40023800 	.word	0x40023800
 800106c:	40020c00 	.word	0x40020c00

08001070 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0a0      	sub	sp, #128	; 0x80
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	225c      	movs	r2, #92	; 0x5c
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f003 fc87 	bl	80049a4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800109e:	d14e      	bne.n	800113e <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80010a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80010a6:	2300      	movs	r3, #0
 80010a8:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010aa:	f107 0310 	add.w	r3, r7, #16
 80010ae:	4618      	mov	r0, r3
 80010b0:	f001 fa1c 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d001      	beq.n	80010be <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80010ba:	f7ff fde9 	bl	8000c90 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <HAL_PCD_MspInit+0xd8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a20      	ldr	r2, [pc, #128]	; (8001148 <HAL_PCD_MspInit+0xd8>)
 80010c8:	f043 0301 	orr.w	r3, r3, #1
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b1e      	ldr	r3, [pc, #120]	; (8001148 <HAL_PCD_MspInit+0xd8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0301 	and.w	r3, r3, #1
 80010d6:	60fb      	str	r3, [r7, #12]
 80010d8:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80010da:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80010de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e0:	2302      	movs	r3, #2
 80010e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e8:	2303      	movs	r3, #3
 80010ea:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80010ec:	230a      	movs	r3, #10
 80010ee:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80010f4:	4619      	mov	r1, r3
 80010f6:	4815      	ldr	r0, [pc, #84]	; (800114c <HAL_PCD_MspInit+0xdc>)
 80010f8:	f000 fde8 	bl	8001ccc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001100:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001102:	2300      	movs	r3, #0
 8001104:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800110a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800110e:	4619      	mov	r1, r3
 8001110:	480e      	ldr	r0, [pc, #56]	; (800114c <HAL_PCD_MspInit+0xdc>)
 8001112:	f000 fddb 	bl	8001ccc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <HAL_PCD_MspInit+0xd8>)
 8001118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800111a:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <HAL_PCD_MspInit+0xd8>)
 800111c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001120:	6353      	str	r3, [r2, #52]	; 0x34
 8001122:	2300      	movs	r3, #0
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <HAL_PCD_MspInit+0xd8>)
 8001128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112a:	4a07      	ldr	r2, [pc, #28]	; (8001148 <HAL_PCD_MspInit+0xd8>)
 800112c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001130:	6453      	str	r3, [r2, #68]	; 0x44
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <HAL_PCD_MspInit+0xd8>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800113e:	bf00      	nop
 8001140:	3780      	adds	r7, #128	; 0x80
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800
 800114c:	40020000 	.word	0x40020000

08001150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <NMI_Handler+0x4>

08001156 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <MemManage_Handler+0x4>

08001162 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001166:	e7fe      	b.n	8001166 <BusFault_Handler+0x4>

08001168 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800116c:	e7fe      	b.n	800116c <UsageFault_Handler+0x4>

0800116e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr

0800117c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001180:	bf00      	nop
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr

0800118a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119c:	f000 f890 	bl	80012c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}

080011a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <SystemInit+0x20>)
 80011aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ae:	4a05      	ldr	r2, [pc, #20]	; (80011c4 <SystemInit+0x20>)
 80011b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011b8:	bf00      	nop
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	e000ed00 	.word	0xe000ed00

080011c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001200 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011cc:	480d      	ldr	r0, [pc, #52]	; (8001204 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011ce:	490e      	ldr	r1, [pc, #56]	; (8001208 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011d0:	4a0e      	ldr	r2, [pc, #56]	; (800120c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0b      	ldr	r2, [pc, #44]	; (8001210 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011e4:	4c0b      	ldr	r4, [pc, #44]	; (8001214 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011f2:	f7ff ffd7 	bl	80011a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011f6:	f003 fbdd 	bl	80049b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011fa:	f7ff f981 	bl	8000500 <main>
  bx  lr    
 80011fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001200:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001204:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001208:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800120c:	08004a3c 	.word	0x08004a3c
  ldr r2, =_sbss
 8001210:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001214:	2000072c 	.word	0x2000072c

08001218 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001218:	e7fe      	b.n	8001218 <ADC_IRQHandler>
	...

0800121c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001220:	4b0e      	ldr	r3, [pc, #56]	; (800125c <HAL_Init+0x40>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a0d      	ldr	r2, [pc, #52]	; (800125c <HAL_Init+0x40>)
 8001226:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800122a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800122c:	4b0b      	ldr	r3, [pc, #44]	; (800125c <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <HAL_Init+0x40>)
 8001232:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001236:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_Init+0x40>)
 800123e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001242:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001244:	2003      	movs	r0, #3
 8001246:	f000 fd0d 	bl	8001c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124a:	2000      	movs	r0, #0
 800124c:	f000 f808 	bl	8001260 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001250:	f7ff fd24 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001254:	2300      	movs	r3, #0
}
 8001256:	4618      	mov	r0, r3
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	40023c00 	.word	0x40023c00

08001260 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <HAL_InitTick+0x54>)
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x58>)
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4619      	mov	r1, r3
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	fbb3 f3f1 	udiv	r3, r3, r1
 800127a:	fbb2 f3f3 	udiv	r3, r2, r3
 800127e:	4618      	mov	r0, r3
 8001280:	f000 fd17 	bl	8001cb2 <HAL_SYSTICK_Config>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128a:	2301      	movs	r3, #1
 800128c:	e00e      	b.n	80012ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d80a      	bhi.n	80012aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800129c:	f000 fced 	bl	8001c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a0:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_InitTick+0x5c>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012a6:	2300      	movs	r3, #0
 80012a8:	e000      	b.n	80012ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000000 	.word	0x20000000
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000004 	.word	0x20000004

080012c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b06      	ldr	r3, [pc, #24]	; (80012e0 <HAL_IncTick+0x20>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	461a      	mov	r2, r3
 80012ca:	4b06      	ldr	r3, [pc, #24]	; (80012e4 <HAL_IncTick+0x24>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4413      	add	r3, r2
 80012d0:	4a04      	ldr	r2, [pc, #16]	; (80012e4 <HAL_IncTick+0x24>)
 80012d2:	6013      	str	r3, [r2, #0]
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	20000008 	.word	0x20000008
 80012e4:	20000728 	.word	0x20000728

080012e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  return uwTick;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <HAL_GetTick+0x14>)
 80012ee:	681b      	ldr	r3, [r3, #0]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	20000728 	.word	0x20000728

08001300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001308:	f7ff ffee 	bl	80012e8 <HAL_GetTick>
 800130c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001318:	d005      	beq.n	8001326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <HAL_Delay+0x44>)
 800131c:	781b      	ldrb	r3, [r3, #0]
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001326:	bf00      	nop
 8001328:	f7ff ffde 	bl	80012e8 <HAL_GetTick>
 800132c:	4602      	mov	r2, r0
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	68fa      	ldr	r2, [r7, #12]
 8001334:	429a      	cmp	r2, r3
 8001336:	d8f7      	bhi.n	8001328 <HAL_Delay+0x28>
  {
  }
}
 8001338:	bf00      	nop
 800133a:	bf00      	nop
 800133c:	3710      	adds	r7, #16
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20000008 	.word	0x20000008

08001348 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b00      	cmp	r3, #0
 8001358:	d101      	bne.n	800135e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e033      	b.n	80013c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001362:	2b00      	cmp	r3, #0
 8001364:	d109      	bne.n	800137a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fcc0 	bl	8000cec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	f003 0310 	and.w	r3, r3, #16
 8001382:	2b00      	cmp	r3, #0
 8001384:	d118      	bne.n	80013b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800138e:	f023 0302 	bic.w	r3, r3, #2
 8001392:	f043 0202 	orr.w	r2, r3, #2
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f000 fab4 	bl	8001908 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f023 0303 	bic.w	r3, r3, #3
 80013ae:	f043 0201 	orr.w	r2, r3, #1
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	641a      	str	r2, [r3, #64]	; 0x40
 80013b6:	e001      	b.n	80013bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013b8:	2301      	movs	r3, #1
 80013ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2200      	movs	r2, #0
 80013c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
	...

080013d0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d101      	bne.n	80013ea <HAL_ADC_Start+0x1a>
 80013e6:	2302      	movs	r3, #2
 80013e8:	e0b2      	b.n	8001550 <HAL_ADC_Start+0x180>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d018      	beq.n	8001432 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	689a      	ldr	r2, [r3, #8]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f042 0201 	orr.w	r2, r2, #1
 800140e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001410:	4b52      	ldr	r3, [pc, #328]	; (800155c <HAL_ADC_Start+0x18c>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a52      	ldr	r2, [pc, #328]	; (8001560 <HAL_ADC_Start+0x190>)
 8001416:	fba2 2303 	umull	r2, r3, r2, r3
 800141a:	0c9a      	lsrs	r2, r3, #18
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001424:	e002      	b.n	800142c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001426:	68bb      	ldr	r3, [r7, #8]
 8001428:	3b01      	subs	r3, #1
 800142a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d1f9      	bne.n	8001426 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	2b01      	cmp	r3, #1
 800143e:	d17a      	bne.n	8001536 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001448:	f023 0301 	bic.w	r3, r3, #1
 800144c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800145e:	2b00      	cmp	r3, #0
 8001460:	d007      	beq.n	8001472 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800146a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800147e:	d106      	bne.n	800148e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001484:	f023 0206 	bic.w	r2, r3, #6
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	645a      	str	r2, [r3, #68]	; 0x44
 800148c:	e002      	b.n	8001494 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800149c:	4b31      	ldr	r3, [pc, #196]	; (8001564 <HAL_ADC_Start+0x194>)
 800149e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80014a8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 031f 	and.w	r3, r3, #31
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d12a      	bne.n	800150c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a2b      	ldr	r2, [pc, #172]	; (8001568 <HAL_ADC_Start+0x198>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d015      	beq.n	80014ec <HAL_ADC_Start+0x11c>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a29      	ldr	r2, [pc, #164]	; (800156c <HAL_ADC_Start+0x19c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d105      	bne.n	80014d6 <HAL_ADC_Start+0x106>
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <HAL_ADC_Start+0x194>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00a      	beq.n	80014ec <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4a25      	ldr	r2, [pc, #148]	; (8001570 <HAL_ADC_Start+0x1a0>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d136      	bne.n	800154e <HAL_ADC_Start+0x17e>
 80014e0:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_ADC_Start+0x194>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f003 0310 	and.w	r3, r3, #16
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d130      	bne.n	800154e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d129      	bne.n	800154e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	689a      	ldr	r2, [r3, #8]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	e020      	b.n	800154e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a15      	ldr	r2, [pc, #84]	; (8001568 <HAL_ADC_Start+0x198>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d11b      	bne.n	800154e <HAL_ADC_Start+0x17e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d114      	bne.n	800154e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001532:	609a      	str	r2, [r3, #8]
 8001534:	e00b      	b.n	800154e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f043 0210 	orr.w	r2, r3, #16
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001546:	f043 0201 	orr.w	r2, r3, #1
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	20000000 	.word	0x20000000
 8001560:	431bde83 	.word	0x431bde83
 8001564:	40012300 	.word	0x40012300
 8001568:	40012000 	.word	0x40012000
 800156c:	40012100 	.word	0x40012100
 8001570:	40012200 	.word	0x40012200

08001574 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800158c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001590:	d113      	bne.n	80015ba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800159c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015a0:	d10b      	bne.n	80015ba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	f043 0220 	orr.w	r2, r3, #32
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e063      	b.n	8001682 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015ba:	f7ff fe95 	bl	80012e8 <HAL_GetTick>
 80015be:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015c0:	e021      	b.n	8001606 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015c8:	d01d      	beq.n	8001606 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d007      	beq.n	80015e0 <HAL_ADC_PollForConversion+0x6c>
 80015d0:	f7ff fe8a 	bl	80012e8 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d212      	bcs.n	8001606 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d00b      	beq.n	8001606 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f043 0204 	orr.w	r2, r3, #4
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2200      	movs	r2, #0
 80015fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e03d      	b.n	8001682 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b02      	cmp	r3, #2
 8001612:	d1d6      	bne.n	80015c2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f06f 0212 	mvn.w	r2, #18
 800161c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001634:	2b00      	cmp	r3, #0
 8001636:	d123      	bne.n	8001680 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800163c:	2b00      	cmp	r3, #0
 800163e:	d11f      	bne.n	8001680 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001646:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800164a:	2b00      	cmp	r3, #0
 800164c:	d006      	beq.n	800165c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001658:	2b00      	cmp	r3, #0
 800165a:	d111      	bne.n	8001680 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d105      	bne.n	8001680 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001678:	f043 0201 	orr.w	r2, r3, #1
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3710      	adds	r7, #16
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}

0800168a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001698:	4618      	mov	r0, r3
 800169a:	370c      	adds	r7, #12
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016ae:	2300      	movs	r3, #0
 80016b0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016b8:	2b01      	cmp	r3, #1
 80016ba:	d101      	bne.n	80016c0 <HAL_ADC_ConfigChannel+0x1c>
 80016bc:	2302      	movs	r3, #2
 80016be:	e113      	b.n	80018e8 <HAL_ADC_ConfigChannel+0x244>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	d925      	bls.n	800171c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	68d9      	ldr	r1, [r3, #12]
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	b29b      	uxth	r3, r3
 80016dc:	461a      	mov	r2, r3
 80016de:	4613      	mov	r3, r2
 80016e0:	005b      	lsls	r3, r3, #1
 80016e2:	4413      	add	r3, r2
 80016e4:	3b1e      	subs	r3, #30
 80016e6:	2207      	movs	r2, #7
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	43da      	mvns	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	400a      	ands	r2, r1
 80016f4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	68d9      	ldr	r1, [r3, #12]
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	b29b      	uxth	r3, r3
 8001706:	4618      	mov	r0, r3
 8001708:	4603      	mov	r3, r0
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	4403      	add	r3, r0
 800170e:	3b1e      	subs	r3, #30
 8001710:	409a      	lsls	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	430a      	orrs	r2, r1
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	e022      	b.n	8001762 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6919      	ldr	r1, [r3, #16]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	461a      	mov	r2, r3
 800172a:	4613      	mov	r3, r2
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4413      	add	r3, r2
 8001730:	2207      	movs	r2, #7
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43da      	mvns	r2, r3
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	400a      	ands	r2, r1
 800173e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6919      	ldr	r1, [r3, #16]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	689a      	ldr	r2, [r3, #8]
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	b29b      	uxth	r3, r3
 8001750:	4618      	mov	r0, r3
 8001752:	4603      	mov	r3, r0
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4403      	add	r3, r0
 8001758:	409a      	lsls	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	430a      	orrs	r2, r1
 8001760:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b06      	cmp	r3, #6
 8001768:	d824      	bhi.n	80017b4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	3b05      	subs	r3, #5
 800177c:	221f      	movs	r2, #31
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43da      	mvns	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	400a      	ands	r2, r1
 800178a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	4618      	mov	r0, r3
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b05      	subs	r3, #5
 80017a6:	fa00 f203 	lsl.w	r2, r0, r3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	430a      	orrs	r2, r1
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34
 80017b2:	e04c      	b.n	800184e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b0c      	cmp	r3, #12
 80017ba:	d824      	bhi.n	8001806 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685a      	ldr	r2, [r3, #4]
 80017c6:	4613      	mov	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	4413      	add	r3, r2
 80017cc:	3b23      	subs	r3, #35	; 0x23
 80017ce:	221f      	movs	r2, #31
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	43da      	mvns	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	400a      	ands	r2, r1
 80017dc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	4618      	mov	r0, r3
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685a      	ldr	r2, [r3, #4]
 80017f0:	4613      	mov	r3, r2
 80017f2:	009b      	lsls	r3, r3, #2
 80017f4:	4413      	add	r3, r2
 80017f6:	3b23      	subs	r3, #35	; 0x23
 80017f8:	fa00 f203 	lsl.w	r2, r0, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	430a      	orrs	r2, r1
 8001802:	631a      	str	r2, [r3, #48]	; 0x30
 8001804:	e023      	b.n	800184e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	4613      	mov	r3, r2
 8001812:	009b      	lsls	r3, r3, #2
 8001814:	4413      	add	r3, r2
 8001816:	3b41      	subs	r3, #65	; 0x41
 8001818:	221f      	movs	r2, #31
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	43da      	mvns	r2, r3
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	400a      	ands	r2, r1
 8001826:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	b29b      	uxth	r3, r3
 8001834:	4618      	mov	r0, r3
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685a      	ldr	r2, [r3, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	3b41      	subs	r3, #65	; 0x41
 8001842:	fa00 f203 	lsl.w	r2, r0, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	430a      	orrs	r2, r1
 800184c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800184e:	4b29      	ldr	r3, [pc, #164]	; (80018f4 <HAL_ADC_ConfigChannel+0x250>)
 8001850:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a28      	ldr	r2, [pc, #160]	; (80018f8 <HAL_ADC_ConfigChannel+0x254>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d10f      	bne.n	800187c <HAL_ADC_ConfigChannel+0x1d8>
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2b12      	cmp	r3, #18
 8001862:	d10b      	bne.n	800187c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a1d      	ldr	r2, [pc, #116]	; (80018f8 <HAL_ADC_ConfigChannel+0x254>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d12b      	bne.n	80018de <HAL_ADC_ConfigChannel+0x23a>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a1c      	ldr	r2, [pc, #112]	; (80018fc <HAL_ADC_ConfigChannel+0x258>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d003      	beq.n	8001898 <HAL_ADC_ConfigChannel+0x1f4>
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	2b11      	cmp	r3, #17
 8001896:	d122      	bne.n	80018de <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a11      	ldr	r2, [pc, #68]	; (80018fc <HAL_ADC_ConfigChannel+0x258>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d111      	bne.n	80018de <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ba:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_ADC_ConfigChannel+0x25c>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a11      	ldr	r2, [pc, #68]	; (8001904 <HAL_ADC_ConfigChannel+0x260>)
 80018c0:	fba2 2303 	umull	r2, r3, r2, r3
 80018c4:	0c9a      	lsrs	r2, r3, #18
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018d0:	e002      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f9      	bne.n	80018d2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018e6:	2300      	movs	r3, #0
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3714      	adds	r7, #20
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40012300 	.word	0x40012300
 80018f8:	40012000 	.word	0x40012000
 80018fc:	10000012 	.word	0x10000012
 8001900:	20000000 	.word	0x20000000
 8001904:	431bde83 	.word	0x431bde83

08001908 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001908:	b480      	push	{r7}
 800190a:	b085      	sub	sp, #20
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001910:	4b79      	ldr	r3, [pc, #484]	; (8001af8 <ADC_Init+0x1f0>)
 8001912:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	431a      	orrs	r2, r3
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800193c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	6859      	ldr	r1, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	021a      	lsls	r2, r3, #8
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001960:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6859      	ldr	r1, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	689a      	ldr	r2, [r3, #8]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	430a      	orrs	r2, r1
 8001972:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689a      	ldr	r2, [r3, #8]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001982:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	6899      	ldr	r1, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800199a:	4a58      	ldr	r2, [pc, #352]	; (8001afc <ADC_Init+0x1f4>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d022      	beq.n	80019e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	689a      	ldr	r2, [r3, #8]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6899      	ldr	r1, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	689a      	ldr	r2, [r3, #8]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6899      	ldr	r1, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	430a      	orrs	r2, r1
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	e00f      	b.n	8001a06 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a04:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 0202 	bic.w	r2, r2, #2
 8001a14:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6899      	ldr	r1, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7e1b      	ldrb	r3, [r3, #24]
 8001a20:	005a      	lsls	r2, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	430a      	orrs	r2, r1
 8001a28:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d01b      	beq.n	8001a6c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a42:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a52:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6859      	ldr	r1, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	035a      	lsls	r2, r3, #13
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	e007      	b.n	8001a7c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a7a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	69db      	ldr	r3, [r3, #28]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	051a      	lsls	r2, r3, #20
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	689a      	ldr	r2, [r3, #8]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ab0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	6899      	ldr	r1, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001abe:	025a      	lsls	r2, r3, #9
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	689a      	ldr	r2, [r3, #8]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ad6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6899      	ldr	r1, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	029a      	lsls	r2, r3, #10
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	609a      	str	r2, [r3, #8]
}
 8001aec:	bf00      	nop
 8001aee:	3714      	adds	r7, #20
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr
 8001af8:	40012300 	.word	0x40012300
 8001afc:	0f000001 	.word	0x0f000001

08001b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0307 	and.w	r3, r3, #7
 8001b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b10:	4b0c      	ldr	r3, [pc, #48]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b12:	68db      	ldr	r3, [r3, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b16:	68ba      	ldr	r2, [r7, #8]
 8001b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b32:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <__NVIC_SetPriorityGrouping+0x44>)
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	60d3      	str	r3, [r2, #12]
}
 8001b38:	bf00      	nop
 8001b3a:	3714      	adds	r7, #20
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr
 8001b44:	e000ed00 	.word	0xe000ed00

08001b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b4c:	4b04      	ldr	r3, [pc, #16]	; (8001b60 <__NVIC_GetPriorityGrouping+0x18>)
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	0a1b      	lsrs	r3, r3, #8
 8001b52:	f003 0307 	and.w	r3, r3, #7
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000ed00 	.word	0xe000ed00

08001b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	6039      	str	r1, [r7, #0]
 8001b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	db0a      	blt.n	8001b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	b2da      	uxtb	r2, r3
 8001b7c:	490c      	ldr	r1, [pc, #48]	; (8001bb0 <__NVIC_SetPriority+0x4c>)
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	0112      	lsls	r2, r2, #4
 8001b84:	b2d2      	uxtb	r2, r2
 8001b86:	440b      	add	r3, r1
 8001b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b8c:	e00a      	b.n	8001ba4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4908      	ldr	r1, [pc, #32]	; (8001bb4 <__NVIC_SetPriority+0x50>)
 8001b94:	79fb      	ldrb	r3, [r7, #7]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	3b04      	subs	r3, #4
 8001b9c:	0112      	lsls	r2, r2, #4
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	761a      	strb	r2, [r3, #24]
}
 8001ba4:	bf00      	nop
 8001ba6:	370c      	adds	r7, #12
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000e100 	.word	0xe000e100
 8001bb4:	e000ed00 	.word	0xe000ed00

08001bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	; 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	f1c3 0307 	rsb	r3, r3, #7
 8001bd2:	2b04      	cmp	r3, #4
 8001bd4:	bf28      	it	cs
 8001bd6:	2304      	movcs	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	2b06      	cmp	r3, #6
 8001be0:	d902      	bls.n	8001be8 <NVIC_EncodePriority+0x30>
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3b03      	subs	r3, #3
 8001be6:	e000      	b.n	8001bea <NVIC_EncodePriority+0x32>
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf6:	43da      	mvns	r2, r3
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0a:	43d9      	mvns	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c10:	4313      	orrs	r3, r2
         );
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3724      	adds	r7, #36	; 0x24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
	...

08001c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c30:	d301      	bcc.n	8001c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c32:	2301      	movs	r3, #1
 8001c34:	e00f      	b.n	8001c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c36:	4a0a      	ldr	r2, [pc, #40]	; (8001c60 <SysTick_Config+0x40>)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c3e:	210f      	movs	r1, #15
 8001c40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001c44:	f7ff ff8e 	bl	8001b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c48:	4b05      	ldr	r3, [pc, #20]	; (8001c60 <SysTick_Config+0x40>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c4e:	4b04      	ldr	r3, [pc, #16]	; (8001c60 <SysTick_Config+0x40>)
 8001c50:	2207      	movs	r2, #7
 8001c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3708      	adds	r7, #8
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	e000e010 	.word	0xe000e010

08001c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b082      	sub	sp, #8
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff ff47 	bl	8001b00 <__NVIC_SetPriorityGrouping>
}
 8001c72:	bf00      	nop
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b086      	sub	sp, #24
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	4603      	mov	r3, r0
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
 8001c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c8c:	f7ff ff5c 	bl	8001b48 <__NVIC_GetPriorityGrouping>
 8001c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	68b9      	ldr	r1, [r7, #8]
 8001c96:	6978      	ldr	r0, [r7, #20]
 8001c98:	f7ff ff8e 	bl	8001bb8 <NVIC_EncodePriority>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca2:	4611      	mov	r1, r2
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff ff5d 	bl	8001b64 <__NVIC_SetPriority>
}
 8001caa:	bf00      	nop
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b082      	sub	sp, #8
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cba:	6878      	ldr	r0, [r7, #4]
 8001cbc:	f7ff ffb0 	bl	8001c20 <SysTick_Config>
 8001cc0:	4603      	mov	r3, r0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b089      	sub	sp, #36	; 0x24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	e165      	b.n	8001fb4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ce8:	2201      	movs	r2, #1
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	f040 8154 	bne.w	8001fae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f003 0303 	and.w	r3, r3, #3
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d005      	beq.n	8001d1e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d130      	bne.n	8001d80 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	2203      	movs	r2, #3
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	68da      	ldr	r2, [r3, #12]
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	69ba      	ldr	r2, [r7, #24]
 8001d4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d54:	2201      	movs	r2, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	4013      	ands	r3, r2
 8001d62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	091b      	lsrs	r3, r3, #4
 8001d6a:	f003 0201 	and.w	r2, r3, #1
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	69ba      	ldr	r2, [r7, #24]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	69ba      	ldr	r2, [r7, #24]
 8001d7e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0303 	and.w	r3, r3, #3
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d017      	beq.n	8001dbc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2203      	movs	r2, #3
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	69ba      	ldr	r2, [r7, #24]
 8001da0:	4013      	ands	r3, r2
 8001da2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	fa02 f303 	lsl.w	r3, r2, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d123      	bne.n	8001e10 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	08da      	lsrs	r2, r3, #3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	3208      	adds	r2, #8
 8001dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	69ba      	ldr	r2, [r7, #24]
 8001de8:	4013      	ands	r3, r2
 8001dea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691a      	ldr	r2, [r3, #16]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	08da      	lsrs	r2, r3, #3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	3208      	adds	r2, #8
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	4013      	ands	r3, r2
 8001e26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0203 	and.w	r2, r3, #3
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	fa02 f303 	lsl.w	r3, r2, r3
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	f000 80ae 	beq.w	8001fae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b5d      	ldr	r3, [pc, #372]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e5a:	4a5c      	ldr	r2, [pc, #368]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001e5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e60:	6453      	str	r3, [r2, #68]	; 0x44
 8001e62:	4b5a      	ldr	r3, [pc, #360]	; (8001fcc <HAL_GPIO_Init+0x300>)
 8001e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e6e:	4a58      	ldr	r2, [pc, #352]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	089b      	lsrs	r3, r3, #2
 8001e74:	3302      	adds	r3, #2
 8001e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	220f      	movs	r2, #15
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	43db      	mvns	r3, r3
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <HAL_GPIO_Init+0x308>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d025      	beq.n	8001ee6 <HAL_GPIO_Init+0x21a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a4e      	ldr	r2, [pc, #312]	; (8001fd8 <HAL_GPIO_Init+0x30c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01f      	beq.n	8001ee2 <HAL_GPIO_Init+0x216>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a4d      	ldr	r2, [pc, #308]	; (8001fdc <HAL_GPIO_Init+0x310>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d019      	beq.n	8001ede <HAL_GPIO_Init+0x212>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a4c      	ldr	r2, [pc, #304]	; (8001fe0 <HAL_GPIO_Init+0x314>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0x20e>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a4b      	ldr	r2, [pc, #300]	; (8001fe4 <HAL_GPIO_Init+0x318>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_GPIO_Init+0x20a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a4a      	ldr	r2, [pc, #296]	; (8001fe8 <HAL_GPIO_Init+0x31c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x206>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a49      	ldr	r2, [pc, #292]	; (8001fec <HAL_GPIO_Init+0x320>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_GPIO_Init+0x202>
 8001eca:	2306      	movs	r3, #6
 8001ecc:	e00c      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ece:	2307      	movs	r3, #7
 8001ed0:	e00a      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ed2:	2305      	movs	r3, #5
 8001ed4:	e008      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ed6:	2304      	movs	r3, #4
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001eda:	2303      	movs	r3, #3
 8001edc:	e004      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ede:	2302      	movs	r3, #2
 8001ee0:	e002      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_GPIO_Init+0x21c>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	69fa      	ldr	r2, [r7, #28]
 8001eea:	f002 0203 	and.w	r2, r2, #3
 8001eee:	0092      	lsls	r2, r2, #2
 8001ef0:	4093      	lsls	r3, r2
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef8:	4935      	ldr	r1, [pc, #212]	; (8001fd0 <HAL_GPIO_Init+0x304>)
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	089b      	lsrs	r3, r3, #2
 8001efe:	3302      	adds	r3, #2
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f06:	4b3a      	ldr	r3, [pc, #232]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	43db      	mvns	r3, r3
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	4013      	ands	r3, r2
 8001f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001f22:	69ba      	ldr	r2, [r7, #24]
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f2a:	4a31      	ldr	r2, [pc, #196]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f2c:	69bb      	ldr	r3, [r7, #24]
 8001f2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f30:	4b2f      	ldr	r3, [pc, #188]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d003      	beq.n	8001f54 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f54:	4a26      	ldr	r2, [pc, #152]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f5a:	4b25      	ldr	r3, [pc, #148]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	43db      	mvns	r3, r3
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	4013      	ands	r3, r2
 8001f68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d003      	beq.n	8001f7e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001f76:	69ba      	ldr	r2, [r7, #24]
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f7e:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f84:	4b1a      	ldr	r3, [pc, #104]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	43db      	mvns	r3, r3
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001fa0:	69ba      	ldr	r2, [r7, #24]
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fa8:	4a11      	ldr	r2, [pc, #68]	; (8001ff0 <HAL_GPIO_Init+0x324>)
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	2b0f      	cmp	r3, #15
 8001fb8:	f67f ae96 	bls.w	8001ce8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3724      	adds	r7, #36	; 0x24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40013800 	.word	0x40013800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400
 8001fdc:	40020800 	.word	0x40020800
 8001fe0:	40020c00 	.word	0x40020c00
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	40021400 	.word	0x40021400
 8001fec:	40021800 	.word	0x40021800
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
 8002000:	4613      	mov	r3, r2
 8002002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002004:	787b      	ldrb	r3, [r7, #1]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d003      	beq.n	8002012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800200a:	887a      	ldrh	r2, [r7, #2]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002010:	e003      	b.n	800201a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	041a      	lsls	r2, r3, #16
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	619a      	str	r2, [r3, #24]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002026:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002028:	b08f      	sub	sp, #60	; 0x3c
 800202a:	af0a      	add	r7, sp, #40	; 0x28
 800202c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e116      	b.n	8002266 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002044:	b2db      	uxtb	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d106      	bne.n	8002058 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff f80c 	bl	8001070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2203      	movs	r2, #3
 800205c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002068:	2b00      	cmp	r3, #0
 800206a:	d102      	bne.n	8002072 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f002 f9f9 	bl	800446e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	687e      	ldr	r6, [r7, #4]
 8002084:	466d      	mov	r5, sp
 8002086:	f106 0410 	add.w	r4, r6, #16
 800208a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002090:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002092:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002096:	e885 0003 	stmia.w	r5, {r0, r1}
 800209a:	1d33      	adds	r3, r6, #4
 800209c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209e:	6838      	ldr	r0, [r7, #0]
 80020a0:	f002 f984 	bl	80043ac <USB_CoreInit>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d005      	beq.n	80020b6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2202      	movs	r2, #2
 80020ae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e0d7      	b.n	8002266 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2100      	movs	r1, #0
 80020bc:	4618      	mov	r0, r3
 80020be:	f002 f9e7 	bl	8004490 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c2:	2300      	movs	r3, #0
 80020c4:	73fb      	strb	r3, [r7, #15]
 80020c6:	e04a      	b.n	800215e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c8:	7bfa      	ldrb	r2, [r7, #15]
 80020ca:	6879      	ldr	r1, [r7, #4]
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	440b      	add	r3, r1
 80020d6:	333d      	adds	r3, #61	; 0x3d
 80020d8:	2201      	movs	r2, #1
 80020da:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	6879      	ldr	r1, [r7, #4]
 80020e0:	4613      	mov	r3, r2
 80020e2:	00db      	lsls	r3, r3, #3
 80020e4:	4413      	add	r3, r2
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	440b      	add	r3, r1
 80020ea:	333c      	adds	r3, #60	; 0x3c
 80020ec:	7bfa      	ldrb	r2, [r7, #15]
 80020ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020f0:	7bfa      	ldrb	r2, [r7, #15]
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	b298      	uxth	r0, r3
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	4413      	add	r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3344      	adds	r3, #68	; 0x44
 8002104:	4602      	mov	r2, r0
 8002106:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3340      	adds	r3, #64	; 0x40
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800211c:	7bfa      	ldrb	r2, [r7, #15]
 800211e:	6879      	ldr	r1, [r7, #4]
 8002120:	4613      	mov	r3, r2
 8002122:	00db      	lsls	r3, r3, #3
 8002124:	4413      	add	r3, r2
 8002126:	009b      	lsls	r3, r3, #2
 8002128:	440b      	add	r3, r1
 800212a:	3348      	adds	r3, #72	; 0x48
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002130:	7bfa      	ldrb	r2, [r7, #15]
 8002132:	6879      	ldr	r1, [r7, #4]
 8002134:	4613      	mov	r3, r2
 8002136:	00db      	lsls	r3, r3, #3
 8002138:	4413      	add	r3, r2
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	440b      	add	r3, r1
 800213e:	334c      	adds	r3, #76	; 0x4c
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002144:	7bfa      	ldrb	r2, [r7, #15]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	00db      	lsls	r3, r3, #3
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	3354      	adds	r3, #84	; 0x54
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	3301      	adds	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	429a      	cmp	r2, r3
 8002166:	d3af      	bcc.n	80020c8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002168:	2300      	movs	r3, #0
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	e044      	b.n	80021f8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800216e:	7bfa      	ldrb	r2, [r7, #15]
 8002170:	6879      	ldr	r1, [r7, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	440b      	add	r3, r1
 800217c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002180:	2200      	movs	r2, #0
 8002182:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002184:	7bfa      	ldrb	r2, [r7, #15]
 8002186:	6879      	ldr	r1, [r7, #4]
 8002188:	4613      	mov	r3, r2
 800218a:	00db      	lsls	r3, r3, #3
 800218c:	4413      	add	r3, r2
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	440b      	add	r3, r1
 8002192:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002196:	7bfa      	ldrb	r2, [r7, #15]
 8002198:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800219a:	7bfa      	ldrb	r2, [r7, #15]
 800219c:	6879      	ldr	r1, [r7, #4]
 800219e:	4613      	mov	r3, r2
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	4413      	add	r3, r2
 80021a4:	009b      	lsls	r3, r3, #2
 80021a6:	440b      	add	r3, r1
 80021a8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021b0:	7bfa      	ldrb	r2, [r7, #15]
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	00db      	lsls	r3, r3, #3
 80021b8:	4413      	add	r3, r2
 80021ba:	009b      	lsls	r3, r3, #2
 80021bc:	440b      	add	r3, r1
 80021be:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021c2:	2200      	movs	r2, #0
 80021c4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021c6:	7bfa      	ldrb	r2, [r7, #15]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	00db      	lsls	r3, r3, #3
 80021ce:	4413      	add	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021d8:	2200      	movs	r2, #0
 80021da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021dc:	7bfa      	ldrb	r2, [r7, #15]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	4413      	add	r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021ee:	2200      	movs	r2, #0
 80021f0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f2:	7bfb      	ldrb	r3, [r7, #15]
 80021f4:	3301      	adds	r3, #1
 80021f6:	73fb      	strb	r3, [r7, #15]
 80021f8:	7bfa      	ldrb	r2, [r7, #15]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d3b5      	bcc.n	800216e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	687e      	ldr	r6, [r7, #4]
 800220a:	466d      	mov	r5, sp
 800220c:	f106 0410 	add.w	r4, r6, #16
 8002210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002214:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002216:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002218:	e894 0003 	ldmia.w	r4, {r0, r1}
 800221c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002220:	1d33      	adds	r3, r6, #4
 8002222:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002224:	6838      	ldr	r0, [r7, #0]
 8002226:	f002 f97f 	bl	8004528 <USB_DevInit>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d005      	beq.n	800223c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e014      	b.n	8002266 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2201      	movs	r2, #1
 8002248:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002250:	2b01      	cmp	r3, #1
 8002252:	d102      	bne.n	800225a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f000 f80a 	bl	800226e <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4618      	mov	r0, r3
 8002260:	f002 fb3d 	bl	80048de <USB_DevDisconnect>

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800226e <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800226e:	b480      	push	{r7}
 8002270:	b085      	sub	sp, #20
 8002272:	af00      	add	r7, sp, #0
 8002274:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800229c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a0:	f043 0303 	orr.w	r3, r3, #3
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3714      	adds	r7, #20
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
	...

080022b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b084      	sub	sp, #16
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e0cc      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022cc:	4b68      	ldr	r3, [pc, #416]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 030f 	and.w	r3, r3, #15
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d90c      	bls.n	80022f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022da:	4b65      	ldr	r3, [pc, #404]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	b2d2      	uxtb	r2, r2
 80022e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022e2:	4b63      	ldr	r3, [pc, #396]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	683a      	ldr	r2, [r7, #0]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d001      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0b8      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d020      	beq.n	8002342 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d005      	beq.n	8002318 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800230c:	4b59      	ldr	r3, [pc, #356]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4a58      	ldr	r2, [pc, #352]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002312:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002316:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d005      	beq.n	8002330 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002324:	4b53      	ldr	r3, [pc, #332]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	4a52      	ldr	r2, [pc, #328]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800232a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800232e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b50      	ldr	r3, [pc, #320]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	494d      	ldr	r1, [pc, #308]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d044      	beq.n	80023d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d107      	bne.n	8002366 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002356:	4b47      	ldr	r3, [pc, #284]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d119      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e07f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d003      	beq.n	8002376 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002372:	2b03      	cmp	r3, #3
 8002374:	d107      	bne.n	8002386 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002376:	4b3f      	ldr	r3, [pc, #252]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e06f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002386:	4b3b      	ldr	r3, [pc, #236]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0302 	and.w	r3, r3, #2
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e067      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002396:	4b37      	ldr	r3, [pc, #220]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f023 0203 	bic.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	4934      	ldr	r1, [pc, #208]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023a8:	f7fe ff9e 	bl	80012e8 <HAL_GetTick>
 80023ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ae:	e00a      	b.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b0:	f7fe ff9a 	bl	80012e8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80023be:	4293      	cmp	r3, r2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e04f      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023c6:	4b2b      	ldr	r3, [pc, #172]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 020c 	and.w	r2, r3, #12
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	009b      	lsls	r3, r3, #2
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d1eb      	bne.n	80023b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023d8:	4b25      	ldr	r3, [pc, #148]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d20c      	bcs.n	8002400 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b22      	ldr	r3, [pc, #136]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ee:	4b20      	ldr	r3, [pc, #128]	; (8002470 <HAL_RCC_ClockConfig+0x1b8>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d001      	beq.n	8002400 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e032      	b.n	8002466 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	d008      	beq.n	800241e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	4916      	ldr	r1, [pc, #88]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0308 	and.w	r3, r3, #8
 8002426:	2b00      	cmp	r3, #0
 8002428:	d009      	beq.n	800243e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	490e      	ldr	r1, [pc, #56]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 800243a:	4313      	orrs	r3, r2
 800243c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800243e:	f000 fb7f 	bl	8002b40 <HAL_RCC_GetSysClockFreq>
 8002442:	4602      	mov	r2, r0
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_ClockConfig+0x1bc>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	490a      	ldr	r1, [pc, #40]	; (8002478 <HAL_RCC_ClockConfig+0x1c0>)
 8002450:	5ccb      	ldrb	r3, [r1, r3]
 8002452:	fa22 f303 	lsr.w	r3, r2, r3
 8002456:	4a09      	ldr	r2, [pc, #36]	; (800247c <HAL_RCC_ClockConfig+0x1c4>)
 8002458:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800245a:	4b09      	ldr	r3, [pc, #36]	; (8002480 <HAL_RCC_ClockConfig+0x1c8>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe fefe 	bl	8001260 <HAL_InitTick>

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40023c00 	.word	0x40023c00
 8002474:	40023800 	.word	0x40023800
 8002478:	08004a14 	.word	0x08004a14
 800247c:	20000000 	.word	0x20000000
 8002480:	20000004 	.word	0x20000004

08002484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002488:	4b03      	ldr	r3, [pc, #12]	; (8002498 <HAL_RCC_GetHCLKFreq+0x14>)
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	20000000 	.word	0x20000000

0800249c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024a0:	f7ff fff0 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024a4:	4602      	mov	r2, r0
 80024a6:	4b05      	ldr	r3, [pc, #20]	; (80024bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	0a9b      	lsrs	r3, r3, #10
 80024ac:	f003 0307 	and.w	r3, r3, #7
 80024b0:	4903      	ldr	r1, [pc, #12]	; (80024c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024b2:	5ccb      	ldrb	r3, [r1, r3]
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40023800 	.word	0x40023800
 80024c0:	08004a24 	.word	0x08004a24

080024c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024c8:	f7ff ffdc 	bl	8002484 <HAL_RCC_GetHCLKFreq>
 80024cc:	4602      	mov	r2, r0
 80024ce:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	0b5b      	lsrs	r3, r3, #13
 80024d4:	f003 0307 	and.w	r3, r3, #7
 80024d8:	4903      	ldr	r1, [pc, #12]	; (80024e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024da:	5ccb      	ldrb	r3, [r1, r3]
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40023800 	.word	0x40023800
 80024e8:	08004a24 	.word	0x08004a24

080024ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b08c      	sub	sp, #48	; 0x30
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80024f4:	2300      	movs	r3, #0
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002500:	2300      	movs	r3, #0
 8002502:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002504:	2300      	movs	r3, #0
 8002506:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002508:	2300      	movs	r3, #0
 800250a:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 800250c:	2300      	movs	r3, #0
 800250e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002510:	2300      	movs	r3, #0
 8002512:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d010      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002524:	4b6f      	ldr	r3, [pc, #444]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252a:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002532:	496c      	ldr	r1, [pc, #432]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800253e:	2b00      	cmp	r3, #0
 8002540:	d101      	bne.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002542:	2301      	movs	r3, #1
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d010      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002552:	4b64      	ldr	r3, [pc, #400]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002558:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002560:	4960      	ldr	r1, [pc, #384]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002570:	2301      	movs	r3, #1
 8002572:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b00      	cmp	r3, #0
 800257e:	d017      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002580:	4b58      	ldr	r3, [pc, #352]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002582:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002586:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4955      	ldr	r1, [pc, #340]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002590:	4313      	orrs	r3, r2
 8002592:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800259e:	d101      	bne.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80025a0:	2301      	movs	r3, #1
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d101      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80025ac:	2301      	movs	r3, #1
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d017      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80025bc:	4b49      	ldr	r3, [pc, #292]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ca:	4946      	ldr	r1, [pc, #280]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025da:	d101      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80025dc:	2301      	movs	r3, #1
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80025e8:	2301      	movs	r3, #1
 80025ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0320 	and.w	r3, r3, #32
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 808a 	beq.w	800270e <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60bb      	str	r3, [r7, #8]
 80025fe:	4b39      	ldr	r3, [pc, #228]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4a38      	ldr	r2, [pc, #224]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002608:	6413      	str	r3, [r2, #64]	; 0x40
 800260a:	4b36      	ldr	r3, [pc, #216]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002616:	4b34      	ldr	r3, [pc, #208]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a33      	ldr	r2, [pc, #204]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800261c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002620:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002622:	f7fe fe61 	bl	80012e8 <HAL_GetTick>
 8002626:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002628:	e008      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800262a:	f7fe fe5d 	bl	80012e8 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e278      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002644:	2b00      	cmp	r3, #0
 8002646:	d0f0      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002648:	4b26      	ldr	r3, [pc, #152]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800264a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002650:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002652:	6a3b      	ldr	r3, [r7, #32]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d02f      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002660:	6a3a      	ldr	r2, [r7, #32]
 8002662:	429a      	cmp	r2, r3
 8002664:	d028      	beq.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002666:	4b1f      	ldr	r3, [pc, #124]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800266e:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002676:	4b1d      	ldr	r3, [pc, #116]	; (80026ec <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800267c:	4a19      	ldr	r2, [pc, #100]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002682:	4b18      	ldr	r3, [pc, #96]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b01      	cmp	r3, #1
 800268c:	d114      	bne.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800268e:	f7fe fe2b 	bl	80012e8 <HAL_GetTick>
 8002692:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	e00a      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002696:	f7fe fe27 	bl	80012e8 <HAL_GetTick>
 800269a:	4602      	mov	r2, r0
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	1ad3      	subs	r3, r2, r3
 80026a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d901      	bls.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80026a8:	2303      	movs	r3, #3
 80026aa:	e240      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ac:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b0:	f003 0302 	and.w	r3, r3, #2
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0ee      	beq.n	8002696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80026c4:	d114      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80026c6:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80026d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026da:	4902      	ldr	r1, [pc, #8]	; (80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	608b      	str	r3, [r1, #8]
 80026e0:	e00c      	b.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x210>
 80026e2:	bf00      	nop
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40007000 	.word	0x40007000
 80026ec:	42470e40 	.word	0x42470e40
 80026f0:	4b4a      	ldr	r3, [pc, #296]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	4a49      	ldr	r2, [pc, #292]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026f6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80026fa:	6093      	str	r3, [r2, #8]
 80026fc:	4b47      	ldr	r3, [pc, #284]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002708:	4944      	ldr	r1, [pc, #272]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800270a:	4313      	orrs	r3, r2
 800270c:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002720:	4b3f      	ldr	r3, [pc, #252]	; (8002820 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002722:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00a      	beq.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002730:	4b3a      	ldr	r3, [pc, #232]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002736:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	4937      	ldr	r1, [pc, #220]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002740:	4313      	orrs	r3, r2
 8002742:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800274e:	2b00      	cmp	r3, #0
 8002750:	d00a      	beq.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002752:	4b32      	ldr	r3, [pc, #200]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002758:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002760:	492e      	ldr	r1, [pc, #184]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002762:	4313      	orrs	r3, r2
 8002764:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002770:	2b00      	cmp	r3, #0
 8002772:	d011      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002774:	4b29      	ldr	r3, [pc, #164]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002776:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800277a:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002782:	4926      	ldr	r1, [pc, #152]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002784:	4313      	orrs	r3, r2
 8002786:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800278e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002792:	d101      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002794:	2301      	movs	r3, #1
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d00a      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80027a4:	4b1d      	ldr	r3, [pc, #116]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b2:	491a      	ldr	r1, [pc, #104]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d011      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80027c6:	4b15      	ldr	r3, [pc, #84]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80027cc:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027d4:	4911      	ldr	r1, [pc, #68]	; (800281c <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027e4:	d101      	bne.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80027e6:	2301      	movs	r3, #1
 80027e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80027ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d005      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x310>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f8:	f040 80ff 	bne.w	80029fa <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80027fc:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027fe:	2200      	movs	r2, #0
 8002800:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002802:	f7fe fd71 	bl	80012e8 <HAL_GetTick>
 8002806:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002808:	e00e      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800280a:	f7fe fd6d 	bl	80012e8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d907      	bls.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e188      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 800281c:	40023800 	.word	0x40023800
 8002820:	424711e0 	.word	0x424711e0
 8002824:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002828:	4b7e      	ldr	r3, [pc, #504]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1ea      	bne.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002844:	2b00      	cmp	r3, #0
 8002846:	d009      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002850:	2b00      	cmp	r3, #0
 8002852:	d028      	beq.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002858:	2b00      	cmp	r3, #0
 800285a:	d124      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800285c:	4b71      	ldr	r3, [pc, #452]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800285e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002862:	0c1b      	lsrs	r3, r3, #16
 8002864:	f003 0303 	and.w	r3, r3, #3
 8002868:	3301      	adds	r3, #1
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800286e:	4b6d      	ldr	r3, [pc, #436]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002874:	0e1b      	lsrs	r3, r3, #24
 8002876:	f003 030f 	and.w	r3, r3, #15
 800287a:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685a      	ldr	r2, [r3, #4]
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	019b      	lsls	r3, r3, #6
 8002886:	431a      	orrs	r2, r3
 8002888:	69fb      	ldr	r3, [r7, #28]
 800288a:	085b      	lsrs	r3, r3, #1
 800288c:	3b01      	subs	r3, #1
 800288e:	041b      	lsls	r3, r3, #16
 8002890:	431a      	orrs	r2, r3
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	061b      	lsls	r3, r3, #24
 8002896:	431a      	orrs	r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	695b      	ldr	r3, [r3, #20]
 800289c:	071b      	lsls	r3, r3, #28
 800289e:	4961      	ldr	r1, [pc, #388]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028ba:	d00a      	beq.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d035      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d0:	d130      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80028d2:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d8:	0c1b      	lsrs	r3, r3, #16
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	3301      	adds	r3, #1
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80028e4:	4b4f      	ldr	r3, [pc, #316]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ea:	0f1b      	lsrs	r3, r3, #28
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685a      	ldr	r2, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	019b      	lsls	r3, r3, #6
 80028fc:	431a      	orrs	r2, r3
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	085b      	lsrs	r3, r3, #1
 8002902:	3b01      	subs	r3, #1
 8002904:	041b      	lsls	r3, r3, #16
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	061b      	lsls	r3, r3, #24
 800290e:	431a      	orrs	r2, r3
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	071b      	lsls	r3, r3, #28
 8002914:	4943      	ldr	r1, [pc, #268]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800291c:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800291e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002922:	f023 021f 	bic.w	r2, r3, #31
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292a:	3b01      	subs	r3, #1
 800292c:	493d      	ldr	r1, [pc, #244]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293c:	2b00      	cmp	r3, #0
 800293e:	d029      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002944:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002948:	d124      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800294a:	4b36      	ldr	r3, [pc, #216]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800294c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002950:	0c1b      	lsrs	r3, r3, #16
 8002952:	f003 0303 	and.w	r3, r3, #3
 8002956:	3301      	adds	r3, #1
 8002958:	005b      	lsls	r3, r3, #1
 800295a:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800295c:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800295e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002962:	0f1b      	lsrs	r3, r3, #28
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685a      	ldr	r2, [r3, #4]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	019b      	lsls	r3, r3, #6
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	085b      	lsrs	r3, r3, #1
 800297c:	3b01      	subs	r3, #1
 800297e:	041b      	lsls	r3, r3, #16
 8002980:	431a      	orrs	r2, r3
 8002982:	69bb      	ldr	r3, [r7, #24]
 8002984:	061b      	lsls	r3, r3, #24
 8002986:	431a      	orrs	r2, r3
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	071b      	lsls	r3, r3, #28
 800298c:	4925      	ldr	r1, [pc, #148]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800299c:	2b00      	cmp	r3, #0
 800299e:	d016      	beq.n	80029ce <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	019b      	lsls	r3, r3, #6
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	085b      	lsrs	r3, r3, #1
 80029b2:	3b01      	subs	r3, #1
 80029b4:	041b      	lsls	r3, r3, #16
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	061b      	lsls	r3, r3, #24
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	695b      	ldr	r3, [r3, #20]
 80029c4:	071b      	lsls	r3, r3, #28
 80029c6:	4917      	ldr	r1, [pc, #92]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029c8:	4313      	orrs	r3, r2
 80029ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029ce:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 80029d0:	2201      	movs	r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80029d4:	f7fe fc88 	bl	80012e8 <HAL_GetTick>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80029dc:	f7fe fc84 	bl	80012e8 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e09f      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029ee:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	f040 8095 	bne.w	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a02:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a08:	f7fe fc6e 	bl	80012e8 <HAL_GetTick>
 8002a0c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a0e:	e00f      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002a10:	f7fe fc6a 	bl	80012e8 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d908      	bls.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e085      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	42470068 	.word	0x42470068
 8002a2c:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a30:	4b41      	ldr	r3, [pc, #260]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a3c:	d0e8      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d009      	beq.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d02b      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d127      	bne.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002a66:	4b34      	ldr	r3, [pc, #208]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	0c1b      	lsrs	r3, r3, #16
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	3301      	adds	r3, #1
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699a      	ldr	r2, [r3, #24]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	019b      	lsls	r3, r3, #6
 8002a82:	431a      	orrs	r2, r3
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	085b      	lsrs	r3, r3, #1
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	041b      	lsls	r3, r3, #16
 8002a8c:	431a      	orrs	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a92:	061b      	lsls	r3, r3, #24
 8002a94:	4928      	ldr	r1, [pc, #160]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a96:	4313      	orrs	r3, r2
 8002a98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002a9c:	4b26      	ldr	r3, [pc, #152]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a9e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002aa2:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	4922      	ldr	r1, [pc, #136]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d01d      	beq.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aca:	d118      	bne.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002acc:	4b1a      	ldr	r3, [pc, #104]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad2:	0e1b      	lsrs	r3, r3, #24
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	699a      	ldr	r2, [r3, #24]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	019b      	lsls	r3, r3, #6
 8002ae4:	431a      	orrs	r2, r3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	3b01      	subs	r3, #1
 8002aee:	041b      	lsls	r3, r3, #16
 8002af0:	431a      	orrs	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	061b      	lsls	r3, r3, #24
 8002af6:	4910      	ldr	r1, [pc, #64]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002afe:	4b0f      	ldr	r3, [pc, #60]	; (8002b3c <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b04:	f7fe fbf0 	bl	80012e8 <HAL_GetTick>
 8002b08:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b0a:	e008      	b.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002b0c:	f7fe fbec 	bl	80012e8 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	2b02      	cmp	r3, #2
 8002b18:	d901      	bls.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002b1a:	2303      	movs	r3, #3
 8002b1c:	e007      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b1e:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b2a:	d1ef      	bne.n	8002b0c <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002b2c:	2300      	movs	r3, #0
}
 8002b2e:	4618      	mov	r0, r3
 8002b30:	3730      	adds	r7, #48	; 0x30
 8002b32:	46bd      	mov	sp, r7
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	42470070 	.word	0x42470070

08002b40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b44:	b0ae      	sub	sp, #184	; 0xb8
 8002b46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b66:	4bcb      	ldr	r3, [pc, #812]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	f200 8206 	bhi.w	8002f80 <HAL_RCC_GetSysClockFreq+0x440>
 8002b74:	a201      	add	r2, pc, #4	; (adr r2, 8002b7c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b7a:	bf00      	nop
 8002b7c:	08002bb1 	.word	0x08002bb1
 8002b80:	08002f81 	.word	0x08002f81
 8002b84:	08002f81 	.word	0x08002f81
 8002b88:	08002f81 	.word	0x08002f81
 8002b8c:	08002bb9 	.word	0x08002bb9
 8002b90:	08002f81 	.word	0x08002f81
 8002b94:	08002f81 	.word	0x08002f81
 8002b98:	08002f81 	.word	0x08002f81
 8002b9c:	08002bc1 	.word	0x08002bc1
 8002ba0:	08002f81 	.word	0x08002f81
 8002ba4:	08002f81 	.word	0x08002f81
 8002ba8:	08002f81 	.word	0x08002f81
 8002bac:	08002db1 	.word	0x08002db1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4bb9      	ldr	r3, [pc, #740]	; (8002e98 <HAL_RCC_GetSysClockFreq+0x358>)
 8002bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002bb6:	e1e7      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bb8:	4bb8      	ldr	r3, [pc, #736]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x35c>)
 8002bba:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002bbe:	e1e3      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc0:	4bb4      	ldr	r3, [pc, #720]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bcc:	4bb1      	ldr	r3, [pc, #708]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d071      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd8:	4bae      	ldr	r3, [pc, #696]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	099b      	lsrs	r3, r3, #6
 8002bde:	2200      	movs	r2, #0
 8002be0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002be4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002be8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002bfa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002bfe:	4622      	mov	r2, r4
 8002c00:	462b      	mov	r3, r5
 8002c02:	f04f 0000 	mov.w	r0, #0
 8002c06:	f04f 0100 	mov.w	r1, #0
 8002c0a:	0159      	lsls	r1, r3, #5
 8002c0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c10:	0150      	lsls	r0, r2, #5
 8002c12:	4602      	mov	r2, r0
 8002c14:	460b      	mov	r3, r1
 8002c16:	4621      	mov	r1, r4
 8002c18:	1a51      	subs	r1, r2, r1
 8002c1a:	6439      	str	r1, [r7, #64]	; 0x40
 8002c1c:	4629      	mov	r1, r5
 8002c1e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c22:	647b      	str	r3, [r7, #68]	; 0x44
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002c30:	4649      	mov	r1, r9
 8002c32:	018b      	lsls	r3, r1, #6
 8002c34:	4641      	mov	r1, r8
 8002c36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c3a:	4641      	mov	r1, r8
 8002c3c:	018a      	lsls	r2, r1, #6
 8002c3e:	4641      	mov	r1, r8
 8002c40:	1a51      	subs	r1, r2, r1
 8002c42:	63b9      	str	r1, [r7, #56]	; 0x38
 8002c44:	4649      	mov	r1, r9
 8002c46:	eb63 0301 	sbc.w	r3, r3, r1
 8002c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c4c:	f04f 0200 	mov.w	r2, #0
 8002c50:	f04f 0300 	mov.w	r3, #0
 8002c54:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8002c58:	4649      	mov	r1, r9
 8002c5a:	00cb      	lsls	r3, r1, #3
 8002c5c:	4641      	mov	r1, r8
 8002c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002c62:	4641      	mov	r1, r8
 8002c64:	00ca      	lsls	r2, r1, #3
 8002c66:	4610      	mov	r0, r2
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	189b      	adds	r3, r3, r2
 8002c70:	633b      	str	r3, [r7, #48]	; 0x30
 8002c72:	462b      	mov	r3, r5
 8002c74:	460a      	mov	r2, r1
 8002c76:	eb42 0303 	adc.w	r3, r2, r3
 8002c7a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002c88:	4629      	mov	r1, r5
 8002c8a:	024b      	lsls	r3, r1, #9
 8002c8c:	4621      	mov	r1, r4
 8002c8e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c92:	4621      	mov	r1, r4
 8002c94:	024a      	lsls	r2, r1, #9
 8002c96:	4610      	mov	r0, r2
 8002c98:	4619      	mov	r1, r3
 8002c9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002ca4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ca8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002cac:	f7fd faaa 	bl	8000204 <__aeabi_uldivmod>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002cba:	e067      	b.n	8002d8c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cbc:	4b75      	ldr	r3, [pc, #468]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002cc8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002ccc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002cd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002cda:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8002cde:	4622      	mov	r2, r4
 8002ce0:	462b      	mov	r3, r5
 8002ce2:	f04f 0000 	mov.w	r0, #0
 8002ce6:	f04f 0100 	mov.w	r1, #0
 8002cea:	0159      	lsls	r1, r3, #5
 8002cec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cf0:	0150      	lsls	r0, r2, #5
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	1a51      	subs	r1, r2, r1
 8002cfa:	62b9      	str	r1, [r7, #40]	; 0x28
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	eb63 0301 	sbc.w	r3, r3, r1
 8002d02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d04:	f04f 0200 	mov.w	r2, #0
 8002d08:	f04f 0300 	mov.w	r3, #0
 8002d0c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002d10:	4649      	mov	r1, r9
 8002d12:	018b      	lsls	r3, r1, #6
 8002d14:	4641      	mov	r1, r8
 8002d16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d1a:	4641      	mov	r1, r8
 8002d1c:	018a      	lsls	r2, r1, #6
 8002d1e:	4641      	mov	r1, r8
 8002d20:	ebb2 0a01 	subs.w	sl, r2, r1
 8002d24:	4649      	mov	r1, r9
 8002d26:	eb63 0b01 	sbc.w	fp, r3, r1
 8002d2a:	f04f 0200 	mov.w	r2, #0
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d36:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d3a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d3e:	4692      	mov	sl, r2
 8002d40:	469b      	mov	fp, r3
 8002d42:	4623      	mov	r3, r4
 8002d44:	eb1a 0303 	adds.w	r3, sl, r3
 8002d48:	623b      	str	r3, [r7, #32]
 8002d4a:	462b      	mov	r3, r5
 8002d4c:	eb4b 0303 	adc.w	r3, fp, r3
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
 8002d52:	f04f 0200 	mov.w	r2, #0
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002d5e:	4629      	mov	r1, r5
 8002d60:	028b      	lsls	r3, r1, #10
 8002d62:	4621      	mov	r1, r4
 8002d64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d68:	4621      	mov	r1, r4
 8002d6a:	028a      	lsls	r2, r1, #10
 8002d6c:	4610      	mov	r0, r2
 8002d6e:	4619      	mov	r1, r3
 8002d70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d74:	2200      	movs	r2, #0
 8002d76:	673b      	str	r3, [r7, #112]	; 0x70
 8002d78:	677a      	str	r2, [r7, #116]	; 0x74
 8002d7a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002d7e:	f7fd fa41 	bl	8000204 <__aeabi_uldivmod>
 8002d82:	4602      	mov	r2, r0
 8002d84:	460b      	mov	r3, r1
 8002d86:	4613      	mov	r3, r2
 8002d88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d8c:	4b41      	ldr	r3, [pc, #260]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	0c1b      	lsrs	r3, r3, #16
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	3301      	adds	r3, #1
 8002d98:	005b      	lsls	r3, r3, #1
 8002d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002d9e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002da2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002da6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002daa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002dae:	e0eb      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002db0:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002dbc:	4b35      	ldr	r3, [pc, #212]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d06b      	beq.n	8002ea0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dc8:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <HAL_RCC_GetSysClockFreq+0x354>)
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	099b      	lsrs	r3, r3, #6
 8002dce:	2200      	movs	r2, #0
 8002dd0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dd2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dda:	663b      	str	r3, [r7, #96]	; 0x60
 8002ddc:	2300      	movs	r3, #0
 8002dde:	667b      	str	r3, [r7, #100]	; 0x64
 8002de0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002de4:	4622      	mov	r2, r4
 8002de6:	462b      	mov	r3, r5
 8002de8:	f04f 0000 	mov.w	r0, #0
 8002dec:	f04f 0100 	mov.w	r1, #0
 8002df0:	0159      	lsls	r1, r3, #5
 8002df2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002df6:	0150      	lsls	r0, r2, #5
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4621      	mov	r1, r4
 8002dfe:	1a51      	subs	r1, r2, r1
 8002e00:	61b9      	str	r1, [r7, #24]
 8002e02:	4629      	mov	r1, r5
 8002e04:	eb63 0301 	sbc.w	r3, r3, r1
 8002e08:	61fb      	str	r3, [r7, #28]
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	f04f 0300 	mov.w	r3, #0
 8002e12:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002e16:	4659      	mov	r1, fp
 8002e18:	018b      	lsls	r3, r1, #6
 8002e1a:	4651      	mov	r1, sl
 8002e1c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e20:	4651      	mov	r1, sl
 8002e22:	018a      	lsls	r2, r1, #6
 8002e24:	4651      	mov	r1, sl
 8002e26:	ebb2 0801 	subs.w	r8, r2, r1
 8002e2a:	4659      	mov	r1, fp
 8002e2c:	eb63 0901 	sbc.w	r9, r3, r1
 8002e30:	f04f 0200 	mov.w	r2, #0
 8002e34:	f04f 0300 	mov.w	r3, #0
 8002e38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e44:	4690      	mov	r8, r2
 8002e46:	4699      	mov	r9, r3
 8002e48:	4623      	mov	r3, r4
 8002e4a:	eb18 0303 	adds.w	r3, r8, r3
 8002e4e:	613b      	str	r3, [r7, #16]
 8002e50:	462b      	mov	r3, r5
 8002e52:	eb49 0303 	adc.w	r3, r9, r3
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002e64:	4629      	mov	r1, r5
 8002e66:	024b      	lsls	r3, r1, #9
 8002e68:	4621      	mov	r1, r4
 8002e6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e6e:	4621      	mov	r1, r4
 8002e70:	024a      	lsls	r2, r1, #9
 8002e72:	4610      	mov	r0, r2
 8002e74:	4619      	mov	r1, r3
 8002e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e7e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002e80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002e84:	f7fd f9be 	bl	8000204 <__aeabi_uldivmod>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002e92:	e065      	b.n	8002f60 <HAL_RCC_GetSysClockFreq+0x420>
 8002e94:	40023800 	.word	0x40023800
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ea0:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	099b      	lsrs	r3, r3, #6
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	4611      	mov	r1, r2
 8002eac:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002eb0:	653b      	str	r3, [r7, #80]	; 0x50
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	657b      	str	r3, [r7, #84]	; 0x54
 8002eb6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002eba:	4642      	mov	r2, r8
 8002ebc:	464b      	mov	r3, r9
 8002ebe:	f04f 0000 	mov.w	r0, #0
 8002ec2:	f04f 0100 	mov.w	r1, #0
 8002ec6:	0159      	lsls	r1, r3, #5
 8002ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ecc:	0150      	lsls	r0, r2, #5
 8002ece:	4602      	mov	r2, r0
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	4641      	mov	r1, r8
 8002ed4:	1a51      	subs	r1, r2, r1
 8002ed6:	60b9      	str	r1, [r7, #8]
 8002ed8:	4649      	mov	r1, r9
 8002eda:	eb63 0301 	sbc.w	r3, r3, r1
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	f04f 0200 	mov.w	r2, #0
 8002ee4:	f04f 0300 	mov.w	r3, #0
 8002ee8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002eec:	4659      	mov	r1, fp
 8002eee:	018b      	lsls	r3, r1, #6
 8002ef0:	4651      	mov	r1, sl
 8002ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ef6:	4651      	mov	r1, sl
 8002ef8:	018a      	lsls	r2, r1, #6
 8002efa:	4651      	mov	r1, sl
 8002efc:	1a54      	subs	r4, r2, r1
 8002efe:	4659      	mov	r1, fp
 8002f00:	eb63 0501 	sbc.w	r5, r3, r1
 8002f04:	f04f 0200 	mov.w	r2, #0
 8002f08:	f04f 0300 	mov.w	r3, #0
 8002f0c:	00eb      	lsls	r3, r5, #3
 8002f0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f12:	00e2      	lsls	r2, r4, #3
 8002f14:	4614      	mov	r4, r2
 8002f16:	461d      	mov	r5, r3
 8002f18:	4643      	mov	r3, r8
 8002f1a:	18e3      	adds	r3, r4, r3
 8002f1c:	603b      	str	r3, [r7, #0]
 8002f1e:	464b      	mov	r3, r9
 8002f20:	eb45 0303 	adc.w	r3, r5, r3
 8002f24:	607b      	str	r3, [r7, #4]
 8002f26:	f04f 0200 	mov.w	r2, #0
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002f32:	4629      	mov	r1, r5
 8002f34:	028b      	lsls	r3, r1, #10
 8002f36:	4621      	mov	r1, r4
 8002f38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	028a      	lsls	r2, r1, #10
 8002f40:	4610      	mov	r0, r2
 8002f42:	4619      	mov	r1, r3
 8002f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f48:	2200      	movs	r2, #0
 8002f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f4c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002f4e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002f52:	f7fd f957 	bl	8000204 <__aeabi_uldivmod>
 8002f56:	4602      	mov	r2, r0
 8002f58:	460b      	mov	r3, r1
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <HAL_RCC_GetSysClockFreq+0x458>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	0f1b      	lsrs	r3, r3, #28
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002f6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f7e:	e003      	b.n	8002f88 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f80:	4b06      	ldr	r3, [pc, #24]	; (8002f9c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002f82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002f86:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f88:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	37b8      	adds	r7, #184	; 0xb8
 8002f90:	46bd      	mov	sp, r7
 8002f92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f96:	bf00      	nop
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	00f42400 	.word	0x00f42400

08002fa0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e28d      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	f000 8083 	beq.w	80030c6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fc0:	4b94      	ldr	r3, [pc, #592]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	f003 030c 	and.w	r3, r3, #12
 8002fc8:	2b04      	cmp	r3, #4
 8002fca:	d019      	beq.n	8003000 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fcc:	4b91      	ldr	r3, [pc, #580]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8002fce:	689b      	ldr	r3, [r3, #8]
 8002fd0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002fd4:	2b08      	cmp	r3, #8
 8002fd6:	d106      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fd8:	4b8e      	ldr	r3, [pc, #568]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fe4:	d00c      	beq.n	8003000 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fe6:	4b8b      	ldr	r3, [pc, #556]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002fee:	2b0c      	cmp	r3, #12
 8002ff0:	d112      	bne.n	8003018 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ff2:	4b88      	ldr	r3, [pc, #544]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ffa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffe:	d10b      	bne.n	8003018 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003000:	4b84      	ldr	r3, [pc, #528]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d05b      	beq.n	80030c4 <HAL_RCC_OscConfig+0x124>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d157      	bne.n	80030c4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e25a      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003020:	d106      	bne.n	8003030 <HAL_RCC_OscConfig+0x90>
 8003022:	4b7c      	ldr	r3, [pc, #496]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a7b      	ldr	r2, [pc, #492]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800302c:	6013      	str	r3, [r2, #0]
 800302e:	e01d      	b.n	800306c <HAL_RCC_OscConfig+0xcc>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003038:	d10c      	bne.n	8003054 <HAL_RCC_OscConfig+0xb4>
 800303a:	4b76      	ldr	r3, [pc, #472]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a75      	ldr	r2, [pc, #468]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003040:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	4b73      	ldr	r3, [pc, #460]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a72      	ldr	r2, [pc, #456]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 800304c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003050:	6013      	str	r3, [r2, #0]
 8003052:	e00b      	b.n	800306c <HAL_RCC_OscConfig+0xcc>
 8003054:	4b6f      	ldr	r3, [pc, #444]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a6e      	ldr	r2, [pc, #440]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 800305a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4b6c      	ldr	r3, [pc, #432]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a6b      	ldr	r2, [pc, #428]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003066:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800306a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d013      	beq.n	800309c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003074:	f7fe f938 	bl	80012e8 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800307c:	f7fe f934 	bl	80012e8 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b64      	cmp	r3, #100	; 0x64
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e21f      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800308e:	4b61      	ldr	r3, [pc, #388]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0xdc>
 800309a:	e014      	b.n	80030c6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe f924 	bl	80012e8 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a4:	f7fe f920 	bl	80012e8 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b64      	cmp	r3, #100	; 0x64
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e20b      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030b6:	4b57      	ldr	r3, [pc, #348]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x104>
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d06f      	beq.n	80031b2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030d2:	4b50      	ldr	r3, [pc, #320]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 030c 	and.w	r3, r3, #12
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d017      	beq.n	800310e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030de:	4b4d      	ldr	r3, [pc, #308]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80030e6:	2b08      	cmp	r3, #8
 80030e8:	d105      	bne.n	80030f6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030ea:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030f6:	4b47      	ldr	r3, [pc, #284]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80030fe:	2b0c      	cmp	r3, #12
 8003100:	d11c      	bne.n	800313c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003102:	4b44      	ldr	r3, [pc, #272]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d116      	bne.n	800313c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800310e:	4b41      	ldr	r3, [pc, #260]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_RCC_OscConfig+0x186>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d001      	beq.n	8003126 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e1d3      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003126:	4b3b      	ldr	r3, [pc, #236]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	691b      	ldr	r3, [r3, #16]
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4937      	ldr	r1, [pc, #220]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003136:	4313      	orrs	r3, r2
 8003138:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800313a:	e03a      	b.n	80031b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d020      	beq.n	8003186 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003144:	4b34      	ldr	r3, [pc, #208]	; (8003218 <HAL_RCC_OscConfig+0x278>)
 8003146:	2201      	movs	r2, #1
 8003148:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800314a:	f7fe f8cd 	bl	80012e8 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003150:	e008      	b.n	8003164 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003152:	f7fe f8c9 	bl	80012e8 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b02      	cmp	r3, #2
 800315e:	d901      	bls.n	8003164 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e1b4      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d0f0      	beq.n	8003152 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003170:	4b28      	ldr	r3, [pc, #160]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	4925      	ldr	r1, [pc, #148]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 8003180:	4313      	orrs	r3, r2
 8003182:	600b      	str	r3, [r1, #0]
 8003184:	e015      	b.n	80031b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003186:	4b24      	ldr	r3, [pc, #144]	; (8003218 <HAL_RCC_OscConfig+0x278>)
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800318c:	f7fe f8ac 	bl	80012e8 <HAL_GetTick>
 8003190:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003192:	e008      	b.n	80031a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003194:	f7fe f8a8 	bl	80012e8 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e193      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031a6:	4b1b      	ldr	r3, [pc, #108]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1f0      	bne.n	8003194 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 0308 	and.w	r3, r3, #8
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d036      	beq.n	800322c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d016      	beq.n	80031f4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031c6:	4b15      	ldr	r3, [pc, #84]	; (800321c <HAL_RCC_OscConfig+0x27c>)
 80031c8:	2201      	movs	r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031cc:	f7fe f88c 	bl	80012e8 <HAL_GetTick>
 80031d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d2:	e008      	b.n	80031e6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031d4:	f7fe f888 	bl	80012e8 <HAL_GetTick>
 80031d8:	4602      	mov	r2, r0
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	1ad3      	subs	r3, r2, r3
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d901      	bls.n	80031e6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e173      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031e6:	4b0b      	ldr	r3, [pc, #44]	; (8003214 <HAL_RCC_OscConfig+0x274>)
 80031e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d0f0      	beq.n	80031d4 <HAL_RCC_OscConfig+0x234>
 80031f2:	e01b      	b.n	800322c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031f4:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_OscConfig+0x27c>)
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031fa:	f7fe f875 	bl	80012e8 <HAL_GetTick>
 80031fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003200:	e00e      	b.n	8003220 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003202:	f7fe f871 	bl	80012e8 <HAL_GetTick>
 8003206:	4602      	mov	r2, r0
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	1ad3      	subs	r3, r2, r3
 800320c:	2b02      	cmp	r3, #2
 800320e:	d907      	bls.n	8003220 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e15c      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
 8003214:	40023800 	.word	0x40023800
 8003218:	42470000 	.word	0x42470000
 800321c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003220:	4b8a      	ldr	r3, [pc, #552]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003222:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ea      	bne.n	8003202 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 8097 	beq.w	8003368 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800323e:	4b83      	ldr	r3, [pc, #524]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d10f      	bne.n	800326a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800324a:	2300      	movs	r3, #0
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	4b7f      	ldr	r3, [pc, #508]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003252:	4a7e      	ldr	r2, [pc, #504]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003254:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003258:	6413      	str	r3, [r2, #64]	; 0x40
 800325a:	4b7c      	ldr	r3, [pc, #496]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003262:	60bb      	str	r3, [r7, #8]
 8003264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003266:	2301      	movs	r3, #1
 8003268:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800326a:	4b79      	ldr	r3, [pc, #484]	; (8003450 <HAL_RCC_OscConfig+0x4b0>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003272:	2b00      	cmp	r3, #0
 8003274:	d118      	bne.n	80032a8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003276:	4b76      	ldr	r3, [pc, #472]	; (8003450 <HAL_RCC_OscConfig+0x4b0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a75      	ldr	r2, [pc, #468]	; (8003450 <HAL_RCC_OscConfig+0x4b0>)
 800327c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003280:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003282:	f7fe f831 	bl	80012e8 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800328a:	f7fe f82d 	bl	80012e8 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e118      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800329c:	4b6c      	ldr	r3, [pc, #432]	; (8003450 <HAL_RCC_OscConfig+0x4b0>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d106      	bne.n	80032be <HAL_RCC_OscConfig+0x31e>
 80032b0:	4b66      	ldr	r3, [pc, #408]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b4:	4a65      	ldr	r2, [pc, #404]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032b6:	f043 0301 	orr.w	r3, r3, #1
 80032ba:	6713      	str	r3, [r2, #112]	; 0x70
 80032bc:	e01c      	b.n	80032f8 <HAL_RCC_OscConfig+0x358>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	2b05      	cmp	r3, #5
 80032c4:	d10c      	bne.n	80032e0 <HAL_RCC_OscConfig+0x340>
 80032c6:	4b61      	ldr	r3, [pc, #388]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ca:	4a60      	ldr	r2, [pc, #384]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032cc:	f043 0304 	orr.w	r3, r3, #4
 80032d0:	6713      	str	r3, [r2, #112]	; 0x70
 80032d2:	4b5e      	ldr	r3, [pc, #376]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d6:	4a5d      	ldr	r2, [pc, #372]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032d8:	f043 0301 	orr.w	r3, r3, #1
 80032dc:	6713      	str	r3, [r2, #112]	; 0x70
 80032de:	e00b      	b.n	80032f8 <HAL_RCC_OscConfig+0x358>
 80032e0:	4b5a      	ldr	r3, [pc, #360]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e4:	4a59      	ldr	r2, [pc, #356]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	6713      	str	r3, [r2, #112]	; 0x70
 80032ec:	4b57      	ldr	r3, [pc, #348]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f0:	4a56      	ldr	r2, [pc, #344]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80032f2:	f023 0304 	bic.w	r3, r3, #4
 80032f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	689b      	ldr	r3, [r3, #8]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d015      	beq.n	800332c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003300:	f7fd fff2 	bl	80012e8 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003306:	e00a      	b.n	800331e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003308:	f7fd ffee 	bl	80012e8 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	f241 3288 	movw	r2, #5000	; 0x1388
 8003316:	4293      	cmp	r3, r2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e0d7      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800331e:	4b4b      	ldr	r3, [pc, #300]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0ee      	beq.n	8003308 <HAL_RCC_OscConfig+0x368>
 800332a:	e014      	b.n	8003356 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332c:	f7fd ffdc 	bl	80012e8 <HAL_GetTick>
 8003330:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003332:	e00a      	b.n	800334a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003334:	f7fd ffd8 	bl	80012e8 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e0c1      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334a:	4b40      	ldr	r3, [pc, #256]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 800334c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d1ee      	bne.n	8003334 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003356:	7dfb      	ldrb	r3, [r7, #23]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d105      	bne.n	8003368 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335c:	4b3b      	ldr	r3, [pc, #236]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 800335e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003360:	4a3a      	ldr	r2, [pc, #232]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003362:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003366:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	699b      	ldr	r3, [r3, #24]
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80ad 	beq.w	80034cc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003372:	4b36      	ldr	r3, [pc, #216]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 030c 	and.w	r3, r3, #12
 800337a:	2b08      	cmp	r3, #8
 800337c:	d060      	beq.n	8003440 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	2b02      	cmp	r3, #2
 8003384:	d145      	bne.n	8003412 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003386:	4b33      	ldr	r3, [pc, #204]	; (8003454 <HAL_RCC_OscConfig+0x4b4>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fd ffac 	bl	80012e8 <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003394:	f7fd ffa8 	bl	80012e8 <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e093      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033a6:	4b29      	ldr	r3, [pc, #164]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c0:	019b      	lsls	r3, r3, #6
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c8:	085b      	lsrs	r3, r3, #1
 80033ca:	3b01      	subs	r3, #1
 80033cc:	041b      	lsls	r3, r3, #16
 80033ce:	431a      	orrs	r2, r3
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	061b      	lsls	r3, r3, #24
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033dc:	071b      	lsls	r3, r3, #28
 80033de:	491b      	ldr	r1, [pc, #108]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_OscConfig+0x4b4>)
 80033e6:	2201      	movs	r2, #1
 80033e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ea:	f7fd ff7d 	bl	80012e8 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033f0:	e008      	b.n	8003404 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033f2:	f7fd ff79 	bl	80012e8 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e064      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003404:	4b11      	ldr	r3, [pc, #68]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0f0      	beq.n	80033f2 <HAL_RCC_OscConfig+0x452>
 8003410:	e05c      	b.n	80034cc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <HAL_RCC_OscConfig+0x4b4>)
 8003414:	2200      	movs	r2, #0
 8003416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003418:	f7fd ff66 	bl	80012e8 <HAL_GetTick>
 800341c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341e:	e008      	b.n	8003432 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003420:	f7fd ff62 	bl	80012e8 <HAL_GetTick>
 8003424:	4602      	mov	r2, r0
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	1ad3      	subs	r3, r2, r3
 800342a:	2b02      	cmp	r3, #2
 800342c:	d901      	bls.n	8003432 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e04d      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	4b06      	ldr	r3, [pc, #24]	; (800344c <HAL_RCC_OscConfig+0x4ac>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d1f0      	bne.n	8003420 <HAL_RCC_OscConfig+0x480>
 800343e:	e045      	b.n	80034cc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	699b      	ldr	r3, [r3, #24]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d107      	bne.n	8003458 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e040      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
 800344c:	40023800 	.word	0x40023800
 8003450:	40007000 	.word	0x40007000
 8003454:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003458:	4b1f      	ldr	r3, [pc, #124]	; (80034d8 <HAL_RCC_OscConfig+0x538>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d030      	beq.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d129      	bne.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d122      	bne.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800348e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003490:	4293      	cmp	r3, r2
 8003492:	d119      	bne.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	3b01      	subs	r3, #1
 80034a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d10f      	bne.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d107      	bne.n	80034c8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e000      	b.n	80034ce <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3718      	adds	r7, #24
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023800 	.word	0x40023800

080034dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e041      	b.n	8003572 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd fc96 	bl	8000e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2202      	movs	r2, #2
 800350c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3304      	adds	r3, #4
 8003518:	4619      	mov	r1, r3
 800351a:	4610      	mov	r0, r2
 800351c:	f000 fa10 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d101      	bne.n	800358c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e041      	b.n	8003610 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d106      	bne.n	80035a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 f839 	bl	8003618 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	3304      	adds	r3, #4
 80035b6:	4619      	mov	r1, r3
 80035b8:	4610      	mov	r0, r2
 80035ba:	f000 f9c1 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2201      	movs	r2, #1
 80035ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2201      	movs	r2, #1
 80035d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d109      	bne.n	8003650 <HAL_TIM_PWM_Start+0x24>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003642:	b2db      	uxtb	r3, r3
 8003644:	2b01      	cmp	r3, #1
 8003646:	bf14      	ite	ne
 8003648:	2301      	movne	r3, #1
 800364a:	2300      	moveq	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e022      	b.n	8003696 <HAL_TIM_PWM_Start+0x6a>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b04      	cmp	r3, #4
 8003654:	d109      	bne.n	800366a <HAL_TIM_PWM_Start+0x3e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800365c:	b2db      	uxtb	r3, r3
 800365e:	2b01      	cmp	r3, #1
 8003660:	bf14      	ite	ne
 8003662:	2301      	movne	r3, #1
 8003664:	2300      	moveq	r3, #0
 8003666:	b2db      	uxtb	r3, r3
 8003668:	e015      	b.n	8003696 <HAL_TIM_PWM_Start+0x6a>
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b08      	cmp	r3, #8
 800366e:	d109      	bne.n	8003684 <HAL_TIM_PWM_Start+0x58>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b01      	cmp	r3, #1
 800367a:	bf14      	ite	ne
 800367c:	2301      	movne	r3, #1
 800367e:	2300      	moveq	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	e008      	b.n	8003696 <HAL_TIM_PWM_Start+0x6a>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b01      	cmp	r3, #1
 800368e:	bf14      	ite	ne
 8003690:	2301      	movne	r3, #1
 8003692:	2300      	moveq	r3, #0
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e07c      	b.n	8003798 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d104      	bne.n	80036ae <HAL_TIM_PWM_Start+0x82>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2202      	movs	r2, #2
 80036a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ac:	e013      	b.n	80036d6 <HAL_TIM_PWM_Start+0xaa>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b04      	cmp	r3, #4
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0x92>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036bc:	e00b      	b.n	80036d6 <HAL_TIM_PWM_Start+0xaa>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0xa2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036cc:	e003      	b.n	80036d6 <HAL_TIM_PWM_Start+0xaa>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2202      	movs	r2, #2
 80036d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2201      	movs	r2, #1
 80036dc:	6839      	ldr	r1, [r7, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fb7e 	bl	8003de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a2d      	ldr	r2, [pc, #180]	; (80037a0 <HAL_TIM_PWM_Start+0x174>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d004      	beq.n	80036f8 <HAL_TIM_PWM_Start+0xcc>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a2c      	ldr	r2, [pc, #176]	; (80037a4 <HAL_TIM_PWM_Start+0x178>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d101      	bne.n	80036fc <HAL_TIM_PWM_Start+0xd0>
 80036f8:	2301      	movs	r3, #1
 80036fa:	e000      	b.n	80036fe <HAL_TIM_PWM_Start+0xd2>
 80036fc:	2300      	movs	r3, #0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d007      	beq.n	8003712 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a22      	ldr	r2, [pc, #136]	; (80037a0 <HAL_TIM_PWM_Start+0x174>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d022      	beq.n	8003762 <HAL_TIM_PWM_Start+0x136>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003724:	d01d      	beq.n	8003762 <HAL_TIM_PWM_Start+0x136>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <HAL_TIM_PWM_Start+0x17c>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d018      	beq.n	8003762 <HAL_TIM_PWM_Start+0x136>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a1d      	ldr	r2, [pc, #116]	; (80037ac <HAL_TIM_PWM_Start+0x180>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d013      	beq.n	8003762 <HAL_TIM_PWM_Start+0x136>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a1c      	ldr	r2, [pc, #112]	; (80037b0 <HAL_TIM_PWM_Start+0x184>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d00e      	beq.n	8003762 <HAL_TIM_PWM_Start+0x136>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a16      	ldr	r2, [pc, #88]	; (80037a4 <HAL_TIM_PWM_Start+0x178>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d009      	beq.n	8003762 <HAL_TIM_PWM_Start+0x136>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a18      	ldr	r2, [pc, #96]	; (80037b4 <HAL_TIM_PWM_Start+0x188>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d004      	beq.n	8003762 <HAL_TIM_PWM_Start+0x136>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a16      	ldr	r2, [pc, #88]	; (80037b8 <HAL_TIM_PWM_Start+0x18c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d111      	bne.n	8003786 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2b06      	cmp	r3, #6
 8003772:	d010      	beq.n	8003796 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003784:	e007      	b.n	8003796 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f042 0201 	orr.w	r2, r2, #1
 8003794:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003796:	2300      	movs	r3, #0
}
 8003798:	4618      	mov	r0, r3
 800379a:	3710      	adds	r7, #16
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	40010000 	.word	0x40010000
 80037a4:	40010400 	.word	0x40010400
 80037a8:	40000400 	.word	0x40000400
 80037ac:	40000800 	.word	0x40000800
 80037b0:	40000c00 	.word	0x40000c00
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40001800 	.word	0x40001800

080037bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c8:	2300      	movs	r3, #0
 80037ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e0ae      	b.n	8003938 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	f200 809f 	bhi.w	8003928 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80037ea:	a201      	add	r2, pc, #4	; (adr r2, 80037f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80037ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037f0:	08003825 	.word	0x08003825
 80037f4:	08003929 	.word	0x08003929
 80037f8:	08003929 	.word	0x08003929
 80037fc:	08003929 	.word	0x08003929
 8003800:	08003865 	.word	0x08003865
 8003804:	08003929 	.word	0x08003929
 8003808:	08003929 	.word	0x08003929
 800380c:	08003929 	.word	0x08003929
 8003810:	080038a7 	.word	0x080038a7
 8003814:	08003929 	.word	0x08003929
 8003818:	08003929 	.word	0x08003929
 800381c:	08003929 	.word	0x08003929
 8003820:	080038e7 	.word	0x080038e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	4618      	mov	r0, r3
 800382c:	f000 f928 	bl	8003a80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	699a      	ldr	r2, [r3, #24]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f042 0208 	orr.w	r2, r2, #8
 800383e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	699a      	ldr	r2, [r3, #24]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0204 	bic.w	r2, r2, #4
 800384e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	6999      	ldr	r1, [r3, #24]
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	691a      	ldr	r2, [r3, #16]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	430a      	orrs	r2, r1
 8003860:	619a      	str	r2, [r3, #24]
      break;
 8003862:	e064      	b.n	800392e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 f978 	bl	8003b60 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800388e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6999      	ldr	r1, [r3, #24]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	021a      	lsls	r2, r3, #8
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	619a      	str	r2, [r3, #24]
      break;
 80038a4:	e043      	b.n	800392e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	68b9      	ldr	r1, [r7, #8]
 80038ac:	4618      	mov	r0, r3
 80038ae:	f000 f9cd 	bl	8003c4c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69da      	ldr	r2, [r3, #28]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f042 0208 	orr.w	r2, r2, #8
 80038c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69da      	ldr	r2, [r3, #28]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 0204 	bic.w	r2, r2, #4
 80038d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	69d9      	ldr	r1, [r3, #28]
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	691a      	ldr	r2, [r3, #16]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	61da      	str	r2, [r3, #28]
      break;
 80038e4:	e023      	b.n	800392e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 fa21 	bl	8003d34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69d9      	ldr	r1, [r3, #28]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	021a      	lsls	r2, r3, #8
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	61da      	str	r2, [r3, #28]
      break;
 8003926:	e002      	b.n	800392e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	75fb      	strb	r3, [r7, #23]
      break;
 800392c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003936:	7dfb      	ldrb	r3, [r7, #23]
}
 8003938:	4618      	mov	r0, r3
 800393a:	3718      	adds	r7, #24
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}

08003940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a40      	ldr	r2, [pc, #256]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d00f      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a3d      	ldr	r2, [pc, #244]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a3c      	ldr	r2, [pc, #240]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a3b      	ldr	r2, [pc, #236]	; (8003a60 <TIM_Base_SetConfig+0x120>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a3a      	ldr	r2, [pc, #232]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a2f      	ldr	r2, [pc, #188]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d02b      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d027      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a2c      	ldr	r2, [pc, #176]	; (8003a58 <TIM_Base_SetConfig+0x118>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d023      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a2b      	ldr	r2, [pc, #172]	; (8003a5c <TIM_Base_SetConfig+0x11c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01f      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a2a      	ldr	r2, [pc, #168]	; (8003a60 <TIM_Base_SetConfig+0x120>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d01b      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a29      	ldr	r2, [pc, #164]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d017      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a28      	ldr	r2, [pc, #160]	; (8003a68 <TIM_Base_SetConfig+0x128>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a27      	ldr	r2, [pc, #156]	; (8003a6c <TIM_Base_SetConfig+0x12c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00f      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a26      	ldr	r2, [pc, #152]	; (8003a70 <TIM_Base_SetConfig+0x130>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a25      	ldr	r2, [pc, #148]	; (8003a74 <TIM_Base_SetConfig+0x134>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a24      	ldr	r2, [pc, #144]	; (8003a78 <TIM_Base_SetConfig+0x138>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d003      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a23      	ldr	r2, [pc, #140]	; (8003a7c <TIM_Base_SetConfig+0x13c>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d108      	bne.n	8003a04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a0a      	ldr	r2, [pc, #40]	; (8003a54 <TIM_Base_SetConfig+0x114>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0xf8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <TIM_Base_SetConfig+0x124>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d103      	bne.n	8003a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	615a      	str	r2, [r3, #20]
}
 8003a46:	bf00      	nop
 8003a48:	3714      	adds	r7, #20
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr
 8003a52:	bf00      	nop
 8003a54:	40010000 	.word	0x40010000
 8003a58:	40000400 	.word	0x40000400
 8003a5c:	40000800 	.word	0x40000800
 8003a60:	40000c00 	.word	0x40000c00
 8003a64:	40010400 	.word	0x40010400
 8003a68:	40014000 	.word	0x40014000
 8003a6c:	40014400 	.word	0x40014400
 8003a70:	40014800 	.word	0x40014800
 8003a74:	40001800 	.word	0x40001800
 8003a78:	40001c00 	.word	0x40001c00
 8003a7c:	40002000 	.word	0x40002000

08003a80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f023 0201 	bic.w	r2, r3, #1
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f023 0303 	bic.w	r3, r3, #3
 8003ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68fa      	ldr	r2, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f023 0302 	bic.w	r3, r3, #2
 8003ac8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	697a      	ldr	r2, [r7, #20]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	4a20      	ldr	r2, [pc, #128]	; (8003b58 <TIM_OC1_SetConfig+0xd8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d003      	beq.n	8003ae4 <TIM_OC1_SetConfig+0x64>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4a1f      	ldr	r2, [pc, #124]	; (8003b5c <TIM_OC1_SetConfig+0xdc>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d10c      	bne.n	8003afe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	f023 0308 	bic.w	r3, r3, #8
 8003aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	697a      	ldr	r2, [r7, #20]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a15      	ldr	r2, [pc, #84]	; (8003b58 <TIM_OC1_SetConfig+0xd8>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d003      	beq.n	8003b0e <TIM_OC1_SetConfig+0x8e>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a14      	ldr	r2, [pc, #80]	; (8003b5c <TIM_OC1_SetConfig+0xdc>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d111      	bne.n	8003b32 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	699b      	ldr	r3, [r3, #24]
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	693a      	ldr	r2, [r7, #16]
 8003b36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	621a      	str	r2, [r3, #32]
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40010400 	.word	0x40010400

08003b60 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b087      	sub	sp, #28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6a1b      	ldr	r3, [r3, #32]
 8003b6e:	f023 0210 	bic.w	r2, r3, #16
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	021b      	lsls	r3, r3, #8
 8003b9e:	68fa      	ldr	r2, [r7, #12]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	f023 0320 	bic.w	r3, r3, #32
 8003baa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a22      	ldr	r2, [pc, #136]	; (8003c44 <TIM_OC2_SetConfig+0xe4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d003      	beq.n	8003bc8 <TIM_OC2_SetConfig+0x68>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a21      	ldr	r2, [pc, #132]	; (8003c48 <TIM_OC2_SetConfig+0xe8>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d10d      	bne.n	8003be4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <TIM_OC2_SetConfig+0xe4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_OC2_SetConfig+0x94>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a16      	ldr	r2, [pc, #88]	; (8003c48 <TIM_OC2_SetConfig+0xe8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d113      	bne.n	8003c1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40010000 	.word	0x40010000
 8003c48:	40010400 	.word	0x40010400

08003c4c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b087      	sub	sp, #28
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
 8003c54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a1b      	ldr	r3, [r3, #32]
 8003c66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	69db      	ldr	r3, [r3, #28]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f023 0303 	bic.w	r3, r3, #3
 8003c82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68fa      	ldr	r2, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	021b      	lsls	r3, r3, #8
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a21      	ldr	r2, [pc, #132]	; (8003d2c <TIM_OC3_SetConfig+0xe0>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_OC3_SetConfig+0x66>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a20      	ldr	r2, [pc, #128]	; (8003d30 <TIM_OC3_SetConfig+0xe4>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d10d      	bne.n	8003cce <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cb8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	021b      	lsls	r3, r3, #8
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ccc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a16      	ldr	r2, [pc, #88]	; (8003d2c <TIM_OC3_SetConfig+0xe0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_OC3_SetConfig+0x92>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <TIM_OC3_SetConfig+0xe4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d113      	bne.n	8003d06 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003ce4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003cec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	699b      	ldr	r3, [r3, #24]
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	693a      	ldr	r2, [r7, #16]
 8003d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	621a      	str	r2, [r3, #32]
}
 8003d20:	bf00      	nop
 8003d22:	371c      	adds	r7, #28
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	40010000 	.word	0x40010000
 8003d30:	40010400 	.word	0x40010400

08003d34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a1b      	ldr	r3, [r3, #32]
 8003d4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	021b      	lsls	r3, r3, #8
 8003d72:	68fa      	ldr	r2, [r7, #12]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689b      	ldr	r3, [r3, #8]
 8003d84:	031b      	lsls	r3, r3, #12
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a12      	ldr	r2, [pc, #72]	; (8003dd8 <TIM_OC4_SetConfig+0xa4>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d003      	beq.n	8003d9c <TIM_OC4_SetConfig+0x68>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a11      	ldr	r2, [pc, #68]	; (8003ddc <TIM_OC4_SetConfig+0xa8>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d109      	bne.n	8003db0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003da2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	019b      	lsls	r3, r3, #6
 8003daa:	697a      	ldr	r2, [r7, #20]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	68fa      	ldr	r2, [r7, #12]
 8003dba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685a      	ldr	r2, [r3, #4]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	621a      	str	r2, [r3, #32]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40010400 	.word	0x40010400

08003de0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f003 031f 	and.w	r3, r3, #31
 8003df2:	2201      	movs	r2, #1
 8003df4:	fa02 f303 	lsl.w	r3, r2, r3
 8003df8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1a      	ldr	r2, [r3, #32]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	43db      	mvns	r3, r3
 8003e02:	401a      	ands	r2, r3
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a1a      	ldr	r2, [r3, #32]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	6879      	ldr	r1, [r7, #4]
 8003e14:	fa01 f303 	lsl.w	r3, r1, r3
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	621a      	str	r2, [r3, #32]
}
 8003e1e:	bf00      	nop
 8003e20:	371c      	adds	r7, #28
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b082      	sub	sp, #8
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d101      	bne.n	8003e3c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e03f      	b.n	8003ebc <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d106      	bne.n	8003e56 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f7fd f8c5 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2224      	movs	r2, #36	; 0x24
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e6c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f828 	bl	8003ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e82:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695a      	ldr	r2, [r3, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e92:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ea2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2220      	movs	r2, #32
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3708      	adds	r7, #8
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}

08003ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ec4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ec8:	b0c0      	sub	sp, #256	; 0x100
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ed0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003edc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee0:	68d9      	ldr	r1, [r3, #12]
 8003ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	ea40 0301 	orr.w	r3, r0, r1
 8003eec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef2:	689a      	ldr	r2, [r3, #8]
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	431a      	orrs	r2, r3
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	431a      	orrs	r2, r3
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f1c:	f021 010c 	bic.w	r1, r1, #12
 8003f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f2a:	430b      	orrs	r3, r1
 8003f2c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f3e:	6999      	ldr	r1, [r3, #24]
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	ea40 0301 	orr.w	r3, r0, r1
 8003f4a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	4b8f      	ldr	r3, [pc, #572]	; (8004190 <UART_SetConfig+0x2cc>)
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d005      	beq.n	8003f64 <UART_SetConfig+0xa0>
 8003f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f5c:	681a      	ldr	r2, [r3, #0]
 8003f5e:	4b8d      	ldr	r3, [pc, #564]	; (8004194 <UART_SetConfig+0x2d0>)
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d104      	bne.n	8003f6e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f64:	f7fe faae 	bl	80024c4 <HAL_RCC_GetPCLK2Freq>
 8003f68:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f6c:	e003      	b.n	8003f76 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f6e:	f7fe fa95 	bl	800249c <HAL_RCC_GetPCLK1Freq>
 8003f72:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f7a:	69db      	ldr	r3, [r3, #28]
 8003f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f80:	f040 810c 	bne.w	800419c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003f8e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f92:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f96:	4622      	mov	r2, r4
 8003f98:	462b      	mov	r3, r5
 8003f9a:	1891      	adds	r1, r2, r2
 8003f9c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f9e:	415b      	adcs	r3, r3
 8003fa0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fa2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fa6:	4621      	mov	r1, r4
 8003fa8:	eb12 0801 	adds.w	r8, r2, r1
 8003fac:	4629      	mov	r1, r5
 8003fae:	eb43 0901 	adc.w	r9, r3, r1
 8003fb2:	f04f 0200 	mov.w	r2, #0
 8003fb6:	f04f 0300 	mov.w	r3, #0
 8003fba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fbe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fc2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc6:	4690      	mov	r8, r2
 8003fc8:	4699      	mov	r9, r3
 8003fca:	4623      	mov	r3, r4
 8003fcc:	eb18 0303 	adds.w	r3, r8, r3
 8003fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	eb49 0303 	adc.w	r3, r9, r3
 8003fda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003fea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003fee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ff2:	460b      	mov	r3, r1
 8003ff4:	18db      	adds	r3, r3, r3
 8003ff6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	eb42 0303 	adc.w	r3, r2, r3
 8003ffe:	657b      	str	r3, [r7, #84]	; 0x54
 8004000:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004004:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004008:	f7fc f8fc 	bl	8000204 <__aeabi_uldivmod>
 800400c:	4602      	mov	r2, r0
 800400e:	460b      	mov	r3, r1
 8004010:	4b61      	ldr	r3, [pc, #388]	; (8004198 <UART_SetConfig+0x2d4>)
 8004012:	fba3 2302 	umull	r2, r3, r3, r2
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	011c      	lsls	r4, r3, #4
 800401a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800401e:	2200      	movs	r2, #0
 8004020:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004024:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004028:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800402c:	4642      	mov	r2, r8
 800402e:	464b      	mov	r3, r9
 8004030:	1891      	adds	r1, r2, r2
 8004032:	64b9      	str	r1, [r7, #72]	; 0x48
 8004034:	415b      	adcs	r3, r3
 8004036:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004038:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800403c:	4641      	mov	r1, r8
 800403e:	eb12 0a01 	adds.w	sl, r2, r1
 8004042:	4649      	mov	r1, r9
 8004044:	eb43 0b01 	adc.w	fp, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004054:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004058:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800405c:	4692      	mov	sl, r2
 800405e:	469b      	mov	fp, r3
 8004060:	4643      	mov	r3, r8
 8004062:	eb1a 0303 	adds.w	r3, sl, r3
 8004066:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800406a:	464b      	mov	r3, r9
 800406c:	eb4b 0303 	adc.w	r3, fp, r3
 8004070:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004080:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004084:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004088:	460b      	mov	r3, r1
 800408a:	18db      	adds	r3, r3, r3
 800408c:	643b      	str	r3, [r7, #64]	; 0x40
 800408e:	4613      	mov	r3, r2
 8004090:	eb42 0303 	adc.w	r3, r2, r3
 8004094:	647b      	str	r3, [r7, #68]	; 0x44
 8004096:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800409a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800409e:	f7fc f8b1 	bl	8000204 <__aeabi_uldivmod>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4611      	mov	r1, r2
 80040a8:	4b3b      	ldr	r3, [pc, #236]	; (8004198 <UART_SetConfig+0x2d4>)
 80040aa:	fba3 2301 	umull	r2, r3, r3, r1
 80040ae:	095b      	lsrs	r3, r3, #5
 80040b0:	2264      	movs	r2, #100	; 0x64
 80040b2:	fb02 f303 	mul.w	r3, r2, r3
 80040b6:	1acb      	subs	r3, r1, r3
 80040b8:	00db      	lsls	r3, r3, #3
 80040ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040be:	4b36      	ldr	r3, [pc, #216]	; (8004198 <UART_SetConfig+0x2d4>)
 80040c0:	fba3 2302 	umull	r2, r3, r3, r2
 80040c4:	095b      	lsrs	r3, r3, #5
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040cc:	441c      	add	r4, r3
 80040ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040d2:	2200      	movs	r2, #0
 80040d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80040d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80040dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80040e0:	4642      	mov	r2, r8
 80040e2:	464b      	mov	r3, r9
 80040e4:	1891      	adds	r1, r2, r2
 80040e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80040e8:	415b      	adcs	r3, r3
 80040ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80040f0:	4641      	mov	r1, r8
 80040f2:	1851      	adds	r1, r2, r1
 80040f4:	6339      	str	r1, [r7, #48]	; 0x30
 80040f6:	4649      	mov	r1, r9
 80040f8:	414b      	adcs	r3, r1
 80040fa:	637b      	str	r3, [r7, #52]	; 0x34
 80040fc:	f04f 0200 	mov.w	r2, #0
 8004100:	f04f 0300 	mov.w	r3, #0
 8004104:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004108:	4659      	mov	r1, fp
 800410a:	00cb      	lsls	r3, r1, #3
 800410c:	4651      	mov	r1, sl
 800410e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004112:	4651      	mov	r1, sl
 8004114:	00ca      	lsls	r2, r1, #3
 8004116:	4610      	mov	r0, r2
 8004118:	4619      	mov	r1, r3
 800411a:	4603      	mov	r3, r0
 800411c:	4642      	mov	r2, r8
 800411e:	189b      	adds	r3, r3, r2
 8004120:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004124:	464b      	mov	r3, r9
 8004126:	460a      	mov	r2, r1
 8004128:	eb42 0303 	adc.w	r3, r2, r3
 800412c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800413c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004140:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004144:	460b      	mov	r3, r1
 8004146:	18db      	adds	r3, r3, r3
 8004148:	62bb      	str	r3, [r7, #40]	; 0x28
 800414a:	4613      	mov	r3, r2
 800414c:	eb42 0303 	adc.w	r3, r2, r3
 8004150:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004152:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004156:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800415a:	f7fc f853 	bl	8000204 <__aeabi_uldivmod>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4b0d      	ldr	r3, [pc, #52]	; (8004198 <UART_SetConfig+0x2d4>)
 8004164:	fba3 1302 	umull	r1, r3, r3, r2
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	2164      	movs	r1, #100	; 0x64
 800416c:	fb01 f303 	mul.w	r3, r1, r3
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	3332      	adds	r3, #50	; 0x32
 8004176:	4a08      	ldr	r2, [pc, #32]	; (8004198 <UART_SetConfig+0x2d4>)
 8004178:	fba2 2303 	umull	r2, r3, r2, r3
 800417c:	095b      	lsrs	r3, r3, #5
 800417e:	f003 0207 	and.w	r2, r3, #7
 8004182:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4422      	add	r2, r4
 800418a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800418c:	e106      	b.n	800439c <UART_SetConfig+0x4d8>
 800418e:	bf00      	nop
 8004190:	40011000 	.word	0x40011000
 8004194:	40011400 	.word	0x40011400
 8004198:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800419c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a0:	2200      	movs	r2, #0
 80041a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041ae:	4642      	mov	r2, r8
 80041b0:	464b      	mov	r3, r9
 80041b2:	1891      	adds	r1, r2, r2
 80041b4:	6239      	str	r1, [r7, #32]
 80041b6:	415b      	adcs	r3, r3
 80041b8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041be:	4641      	mov	r1, r8
 80041c0:	1854      	adds	r4, r2, r1
 80041c2:	4649      	mov	r1, r9
 80041c4:	eb43 0501 	adc.w	r5, r3, r1
 80041c8:	f04f 0200 	mov.w	r2, #0
 80041cc:	f04f 0300 	mov.w	r3, #0
 80041d0:	00eb      	lsls	r3, r5, #3
 80041d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041d6:	00e2      	lsls	r2, r4, #3
 80041d8:	4614      	mov	r4, r2
 80041da:	461d      	mov	r5, r3
 80041dc:	4643      	mov	r3, r8
 80041de:	18e3      	adds	r3, r4, r3
 80041e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80041e4:	464b      	mov	r3, r9
 80041e6:	eb45 0303 	adc.w	r3, r5, r3
 80041ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041fe:	f04f 0200 	mov.w	r2, #0
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800420a:	4629      	mov	r1, r5
 800420c:	008b      	lsls	r3, r1, #2
 800420e:	4621      	mov	r1, r4
 8004210:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004214:	4621      	mov	r1, r4
 8004216:	008a      	lsls	r2, r1, #2
 8004218:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800421c:	f7fb fff2 	bl	8000204 <__aeabi_uldivmod>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4b60      	ldr	r3, [pc, #384]	; (80043a8 <UART_SetConfig+0x4e4>)
 8004226:	fba3 2302 	umull	r2, r3, r3, r2
 800422a:	095b      	lsrs	r3, r3, #5
 800422c:	011c      	lsls	r4, r3, #4
 800422e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004232:	2200      	movs	r2, #0
 8004234:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004238:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800423c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004240:	4642      	mov	r2, r8
 8004242:	464b      	mov	r3, r9
 8004244:	1891      	adds	r1, r2, r2
 8004246:	61b9      	str	r1, [r7, #24]
 8004248:	415b      	adcs	r3, r3
 800424a:	61fb      	str	r3, [r7, #28]
 800424c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004250:	4641      	mov	r1, r8
 8004252:	1851      	adds	r1, r2, r1
 8004254:	6139      	str	r1, [r7, #16]
 8004256:	4649      	mov	r1, r9
 8004258:	414b      	adcs	r3, r1
 800425a:	617b      	str	r3, [r7, #20]
 800425c:	f04f 0200 	mov.w	r2, #0
 8004260:	f04f 0300 	mov.w	r3, #0
 8004264:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004268:	4659      	mov	r1, fp
 800426a:	00cb      	lsls	r3, r1, #3
 800426c:	4651      	mov	r1, sl
 800426e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004272:	4651      	mov	r1, sl
 8004274:	00ca      	lsls	r2, r1, #3
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	4603      	mov	r3, r0
 800427c:	4642      	mov	r2, r8
 800427e:	189b      	adds	r3, r3, r2
 8004280:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004284:	464b      	mov	r3, r9
 8004286:	460a      	mov	r2, r1
 8004288:	eb42 0303 	adc.w	r3, r2, r3
 800428c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	67bb      	str	r3, [r7, #120]	; 0x78
 800429a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800429c:	f04f 0200 	mov.w	r2, #0
 80042a0:	f04f 0300 	mov.w	r3, #0
 80042a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042a8:	4649      	mov	r1, r9
 80042aa:	008b      	lsls	r3, r1, #2
 80042ac:	4641      	mov	r1, r8
 80042ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b2:	4641      	mov	r1, r8
 80042b4:	008a      	lsls	r2, r1, #2
 80042b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042ba:	f7fb ffa3 	bl	8000204 <__aeabi_uldivmod>
 80042be:	4602      	mov	r2, r0
 80042c0:	460b      	mov	r3, r1
 80042c2:	4611      	mov	r1, r2
 80042c4:	4b38      	ldr	r3, [pc, #224]	; (80043a8 <UART_SetConfig+0x4e4>)
 80042c6:	fba3 2301 	umull	r2, r3, r3, r1
 80042ca:	095b      	lsrs	r3, r3, #5
 80042cc:	2264      	movs	r2, #100	; 0x64
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	1acb      	subs	r3, r1, r3
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	3332      	adds	r3, #50	; 0x32
 80042d8:	4a33      	ldr	r2, [pc, #204]	; (80043a8 <UART_SetConfig+0x4e4>)
 80042da:	fba2 2303 	umull	r2, r3, r2, r3
 80042de:	095b      	lsrs	r3, r3, #5
 80042e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042e4:	441c      	add	r4, r3
 80042e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042ea:	2200      	movs	r2, #0
 80042ec:	673b      	str	r3, [r7, #112]	; 0x70
 80042ee:	677a      	str	r2, [r7, #116]	; 0x74
 80042f0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80042f4:	4642      	mov	r2, r8
 80042f6:	464b      	mov	r3, r9
 80042f8:	1891      	adds	r1, r2, r2
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	415b      	adcs	r3, r3
 80042fe:	60fb      	str	r3, [r7, #12]
 8004300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004304:	4641      	mov	r1, r8
 8004306:	1851      	adds	r1, r2, r1
 8004308:	6039      	str	r1, [r7, #0]
 800430a:	4649      	mov	r1, r9
 800430c:	414b      	adcs	r3, r1
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	f04f 0200 	mov.w	r2, #0
 8004314:	f04f 0300 	mov.w	r3, #0
 8004318:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800431c:	4659      	mov	r1, fp
 800431e:	00cb      	lsls	r3, r1, #3
 8004320:	4651      	mov	r1, sl
 8004322:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004326:	4651      	mov	r1, sl
 8004328:	00ca      	lsls	r2, r1, #3
 800432a:	4610      	mov	r0, r2
 800432c:	4619      	mov	r1, r3
 800432e:	4603      	mov	r3, r0
 8004330:	4642      	mov	r2, r8
 8004332:	189b      	adds	r3, r3, r2
 8004334:	66bb      	str	r3, [r7, #104]	; 0x68
 8004336:	464b      	mov	r3, r9
 8004338:	460a      	mov	r2, r1
 800433a:	eb42 0303 	adc.w	r3, r2, r3
 800433e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	663b      	str	r3, [r7, #96]	; 0x60
 800434a:	667a      	str	r2, [r7, #100]	; 0x64
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004358:	4649      	mov	r1, r9
 800435a:	008b      	lsls	r3, r1, #2
 800435c:	4641      	mov	r1, r8
 800435e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004362:	4641      	mov	r1, r8
 8004364:	008a      	lsls	r2, r1, #2
 8004366:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800436a:	f7fb ff4b 	bl	8000204 <__aeabi_uldivmod>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <UART_SetConfig+0x4e4>)
 8004374:	fba3 1302 	umull	r1, r3, r3, r2
 8004378:	095b      	lsrs	r3, r3, #5
 800437a:	2164      	movs	r1, #100	; 0x64
 800437c:	fb01 f303 	mul.w	r3, r1, r3
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	3332      	adds	r3, #50	; 0x32
 8004386:	4a08      	ldr	r2, [pc, #32]	; (80043a8 <UART_SetConfig+0x4e4>)
 8004388:	fba2 2303 	umull	r2, r3, r2, r3
 800438c:	095b      	lsrs	r3, r3, #5
 800438e:	f003 020f 	and.w	r2, r3, #15
 8004392:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4422      	add	r2, r4
 800439a:	609a      	str	r2, [r3, #8]
}
 800439c:	bf00      	nop
 800439e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043a2:	46bd      	mov	sp, r7
 80043a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043a8:	51eb851f 	.word	0x51eb851f

080043ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043ac:	b084      	sub	sp, #16
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b084      	sub	sp, #16
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	6078      	str	r0, [r7, #4]
 80043b6:	f107 001c 	add.w	r0, r7, #28
 80043ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d122      	bne.n	800440a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	68db      	ldr	r3, [r3, #12]
 80043d4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80043ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ee:	2b01      	cmp	r3, #1
 80043f0:	d105      	bne.n	80043fe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa9c 	bl	800493c <USB_CoreReset>
 8004404:	4603      	mov	r3, r0
 8004406:	73fb      	strb	r3, [r7, #15]
 8004408:	e01a      	b.n	8004440 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68db      	ldr	r3, [r3, #12]
 800440e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fa90 	bl	800493c <USB_CoreReset>
 800441c:	4603      	mov	r3, r0
 800441e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004420:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d106      	bne.n	8004434 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800442a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	639a      	str	r2, [r3, #56]	; 0x38
 8004432:	e005      	b.n	8004440 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004438:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004442:	2b01      	cmp	r3, #1
 8004444:	d10b      	bne.n	800445e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f043 0206 	orr.w	r2, r3, #6
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f043 0220 	orr.w	r2, r3, #32
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800445e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800446a:	b004      	add	sp, #16
 800446c:	4770      	bx	lr

0800446e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800446e:	b480      	push	{r7}
 8004470:	b083      	sub	sp, #12
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f023 0201 	bic.w	r2, r3, #1
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	370c      	adds	r7, #12
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr

08004490 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	460b      	mov	r3, r1
 800449a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d115      	bne.n	80044de <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044be:	2001      	movs	r0, #1
 80044c0:	f7fc ff1e 	bl	8001300 <HAL_Delay>
      ms++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f000 fa28 	bl	8004920 <USB_GetMode>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d01e      	beq.n	8004514 <USB_SetCurrentMode+0x84>
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2b31      	cmp	r3, #49	; 0x31
 80044da:	d9f0      	bls.n	80044be <USB_SetCurrentMode+0x2e>
 80044dc:	e01a      	b.n	8004514 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044de:	78fb      	ldrb	r3, [r7, #3]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d115      	bne.n	8004510 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044f0:	2001      	movs	r0, #1
 80044f2:	f7fc ff05 	bl	8001300 <HAL_Delay>
      ms++;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	3301      	adds	r3, #1
 80044fa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fa0f 	bl	8004920 <USB_GetMode>
 8004502:	4603      	mov	r3, r0
 8004504:	2b00      	cmp	r3, #0
 8004506:	d005      	beq.n	8004514 <USB_SetCurrentMode+0x84>
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b31      	cmp	r3, #49	; 0x31
 800450c:	d9f0      	bls.n	80044f0 <USB_SetCurrentMode+0x60>
 800450e:	e001      	b.n	8004514 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e005      	b.n	8004520 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b32      	cmp	r3, #50	; 0x32
 8004518:	d101      	bne.n	800451e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e000      	b.n	8004520 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800451e:	2300      	movs	r3, #0
}
 8004520:	4618      	mov	r0, r3
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004528:	b084      	sub	sp, #16
 800452a:	b580      	push	{r7, lr}
 800452c:	b086      	sub	sp, #24
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
 8004532:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004536:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800453a:	2300      	movs	r3, #0
 800453c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004542:	2300      	movs	r3, #0
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	e009      	b.n	800455c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	3340      	adds	r3, #64	; 0x40
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	4413      	add	r3, r2
 8004552:	2200      	movs	r2, #0
 8004554:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	3301      	adds	r3, #1
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	2b0e      	cmp	r3, #14
 8004560:	d9f2      	bls.n	8004548 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004564:	2b00      	cmp	r3, #0
 8004566:	d11c      	bne.n	80045a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	68fa      	ldr	r2, [r7, #12]
 8004572:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004576:	f043 0302 	orr.w	r3, r3, #2
 800457a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004580:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	601a      	str	r2, [r3, #0]
 80045a0:	e005      	b.n	80045ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045b4:	461a      	mov	r2, r3
 80045b6:	2300      	movs	r3, #0
 80045b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c0:	4619      	mov	r1, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c8:	461a      	mov	r2, r3
 80045ca:	680b      	ldr	r3, [r1, #0]
 80045cc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d10c      	bne.n	80045ee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d104      	bne.n	80045e4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045da:	2100      	movs	r1, #0
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f000 f965 	bl	80048ac <USB_SetDevSpeed>
 80045e2:	e008      	b.n	80045f6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045e4:	2101      	movs	r1, #1
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f960 	bl	80048ac <USB_SetDevSpeed>
 80045ec:	e003      	b.n	80045f6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045ee:	2103      	movs	r1, #3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f95b 	bl	80048ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045f6:	2110      	movs	r1, #16
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f8f3 	bl	80047e4 <USB_FlushTxFifo>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f000 f91f 	bl	800484c <USB_FlushRxFifo>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d001      	beq.n	8004618 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461e:	461a      	mov	r2, r3
 8004620:	2300      	movs	r3, #0
 8004622:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800462a:	461a      	mov	r2, r3
 800462c:	2300      	movs	r3, #0
 800462e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004636:	461a      	mov	r2, r3
 8004638:	2300      	movs	r3, #0
 800463a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800463c:	2300      	movs	r3, #0
 800463e:	613b      	str	r3, [r7, #16]
 8004640:	e043      	b.n	80046ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004654:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004658:	d118      	bne.n	800468c <USB_DevInit+0x164>
    {
      if (i == 0U)
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10a      	bne.n	8004676 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466c:	461a      	mov	r2, r3
 800466e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004672:	6013      	str	r3, [r2, #0]
 8004674:	e013      	b.n	800469e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	015a      	lsls	r2, r3, #5
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	4413      	add	r3, r2
 800467e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004682:	461a      	mov	r2, r3
 8004684:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	e008      	b.n	800469e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	015a      	lsls	r2, r3, #5
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	4413      	add	r3, r2
 8004694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004698:	461a      	mov	r2, r3
 800469a:	2300      	movs	r3, #0
 800469c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046aa:	461a      	mov	r2, r3
 80046ac:	2300      	movs	r3, #0
 80046ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046bc:	461a      	mov	r2, r3
 80046be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	3301      	adds	r3, #1
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d3b7      	bcc.n	8004642 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046d2:	2300      	movs	r3, #0
 80046d4:	613b      	str	r3, [r7, #16]
 80046d6:	e043      	b.n	8004760 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ee:	d118      	bne.n	8004722 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004702:	461a      	mov	r2, r3
 8004704:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004708:	6013      	str	r3, [r2, #0]
 800470a:	e013      	b.n	8004734 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004718:	461a      	mov	r2, r3
 800471a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800471e:	6013      	str	r3, [r2, #0]
 8004720:	e008      	b.n	8004734 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	015a      	lsls	r2, r3, #5
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	4413      	add	r3, r2
 800472a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472e:	461a      	mov	r2, r3
 8004730:	2300      	movs	r3, #0
 8004732:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	015a      	lsls	r2, r3, #5
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	4413      	add	r3, r2
 800473c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004740:	461a      	mov	r2, r3
 8004742:	2300      	movs	r3, #0
 8004744:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	015a      	lsls	r2, r3, #5
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	4413      	add	r3, r2
 800474e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004752:	461a      	mov	r2, r3
 8004754:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004758:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	3301      	adds	r3, #1
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	693a      	ldr	r2, [r7, #16]
 8004764:	429a      	cmp	r2, r3
 8004766:	d3b7      	bcc.n	80046d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	68fa      	ldr	r2, [r7, #12]
 8004772:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004776:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800477a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004788:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	2b00      	cmp	r3, #0
 800478e:	d105      	bne.n	800479c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	699b      	ldr	r3, [r3, #24]
 8004794:	f043 0210 	orr.w	r2, r3, #16
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	699a      	ldr	r2, [r3, #24]
 80047a0:	4b0f      	ldr	r3, [pc, #60]	; (80047e0 <USB_DevInit+0x2b8>)
 80047a2:	4313      	orrs	r3, r2
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d005      	beq.n	80047ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f043 0208 	orr.w	r2, r3, #8
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047bc:	2b01      	cmp	r3, #1
 80047be:	d107      	bne.n	80047d0 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047c8:	f043 0304 	orr.w	r3, r3, #4
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3718      	adds	r7, #24
 80047d6:	46bd      	mov	sp, r7
 80047d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047dc:	b004      	add	sp, #16
 80047de:	4770      	bx	lr
 80047e0:	803c3800 	.word	0x803c3800

080047e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b085      	sub	sp, #20
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	3301      	adds	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4a13      	ldr	r2, [pc, #76]	; (8004848 <USB_FlushTxFifo+0x64>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e01b      	b.n	800483c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b00      	cmp	r3, #0
 800480a:	daf2      	bge.n	80047f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	019b      	lsls	r3, r3, #6
 8004814:	f043 0220 	orr.w	r2, r3, #32
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a08      	ldr	r2, [pc, #32]	; (8004848 <USB_FlushTxFifo+0x64>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e006      	b.n	800483c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0320 	and.w	r3, r3, #32
 8004836:	2b20      	cmp	r3, #32
 8004838:	d0f0      	beq.n	800481c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	00030d40 	.word	0x00030d40

0800484c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800484c:	b480      	push	{r7}
 800484e:	b085      	sub	sp, #20
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004854:	2300      	movs	r3, #0
 8004856:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	3301      	adds	r3, #1
 800485c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	4a11      	ldr	r2, [pc, #68]	; (80048a8 <USB_FlushRxFifo+0x5c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d901      	bls.n	800486a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004866:	2303      	movs	r3, #3
 8004868:	e018      	b.n	800489c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	daf2      	bge.n	8004858 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004872:	2300      	movs	r3, #0
 8004874:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2210      	movs	r2, #16
 800487a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	3301      	adds	r3, #1
 8004880:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	4a08      	ldr	r2, [pc, #32]	; (80048a8 <USB_FlushRxFifo+0x5c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d901      	bls.n	800488e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e006      	b.n	800489c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	691b      	ldr	r3, [r3, #16]
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	2b10      	cmp	r3, #16
 8004898:	d0f0      	beq.n	800487c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	00030d40 	.word	0x00030d40

080048ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	78fb      	ldrb	r3, [r7, #3]
 80048c6:	68f9      	ldr	r1, [r7, #12]
 80048c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048cc:	4313      	orrs	r3, r2
 80048ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048de:	b480      	push	{r7}
 80048e0:	b085      	sub	sp, #20
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048f8:	f023 0303 	bic.w	r3, r3, #3
 80048fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800490c:	f043 0302 	orr.w	r3, r3, #2
 8004910:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f003 0301 	and.w	r3, r3, #1
}
 8004930:	4618      	mov	r0, r3
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	3301      	adds	r3, #1
 800494c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4a13      	ldr	r2, [pc, #76]	; (80049a0 <USB_CoreReset+0x64>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d901      	bls.n	800495a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e01b      	b.n	8004992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	691b      	ldr	r3, [r3, #16]
 800495e:	2b00      	cmp	r3, #0
 8004960:	daf2      	bge.n	8004948 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004962:	2300      	movs	r3, #0
 8004964:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	f043 0201 	orr.w	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	3301      	adds	r3, #1
 8004976:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	4a09      	ldr	r2, [pc, #36]	; (80049a0 <USB_CoreReset+0x64>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d901      	bls.n	8004984 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e006      	b.n	8004992 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	f003 0301 	and.w	r3, r3, #1
 800498c:	2b01      	cmp	r3, #1
 800498e:	d0f0      	beq.n	8004972 <USB_CoreReset+0x36>

  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3714      	adds	r7, #20
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	00030d40 	.word	0x00030d40

080049a4 <memset>:
 80049a4:	4402      	add	r2, r0
 80049a6:	4603      	mov	r3, r0
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d100      	bne.n	80049ae <memset+0xa>
 80049ac:	4770      	bx	lr
 80049ae:	f803 1b01 	strb.w	r1, [r3], #1
 80049b2:	e7f9      	b.n	80049a8 <memset+0x4>

080049b4 <__libc_init_array>:
 80049b4:	b570      	push	{r4, r5, r6, lr}
 80049b6:	4d0d      	ldr	r5, [pc, #52]	; (80049ec <__libc_init_array+0x38>)
 80049b8:	4c0d      	ldr	r4, [pc, #52]	; (80049f0 <__libc_init_array+0x3c>)
 80049ba:	1b64      	subs	r4, r4, r5
 80049bc:	10a4      	asrs	r4, r4, #2
 80049be:	2600      	movs	r6, #0
 80049c0:	42a6      	cmp	r6, r4
 80049c2:	d109      	bne.n	80049d8 <__libc_init_array+0x24>
 80049c4:	4d0b      	ldr	r5, [pc, #44]	; (80049f4 <__libc_init_array+0x40>)
 80049c6:	4c0c      	ldr	r4, [pc, #48]	; (80049f8 <__libc_init_array+0x44>)
 80049c8:	f000 f818 	bl	80049fc <_init>
 80049cc:	1b64      	subs	r4, r4, r5
 80049ce:	10a4      	asrs	r4, r4, #2
 80049d0:	2600      	movs	r6, #0
 80049d2:	42a6      	cmp	r6, r4
 80049d4:	d105      	bne.n	80049e2 <__libc_init_array+0x2e>
 80049d6:	bd70      	pop	{r4, r5, r6, pc}
 80049d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049dc:	4798      	blx	r3
 80049de:	3601      	adds	r6, #1
 80049e0:	e7ee      	b.n	80049c0 <__libc_init_array+0xc>
 80049e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e6:	4798      	blx	r3
 80049e8:	3601      	adds	r6, #1
 80049ea:	e7f2      	b.n	80049d2 <__libc_init_array+0x1e>
 80049ec:	08004a34 	.word	0x08004a34
 80049f0:	08004a34 	.word	0x08004a34
 80049f4:	08004a34 	.word	0x08004a34
 80049f8:	08004a38 	.word	0x08004a38

080049fc <_init>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr

08004a08 <_fini>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr
